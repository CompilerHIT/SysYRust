   Compiling compiler v0.1.0 (/home/yjh/work/sysy/compiler2023)
warning: unused import: `func`
  --> src/backend/func.rs:17:41
   |
17 | use crate::backend::{block::*, operand, func};
   |                                         ^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `easy_ls_alloc::Allocator`
  --> src/backend/func.rs:20:5
   |
20 |     easy_ls_alloc::Allocator, regalloc::Regalloc, structs::FuncAllocStat,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::cmp::min`
 --> src/backend/instrs.rs:1:5
  |
1 | use std::cmp::min;
  |     ^^^^^^^^^^^^^

warning: unused import: `crate::log`
  --> src/backend/module.rs:12:5
   |
12 | use crate::log;
   |     ^^^^^^^^^^

warning: unused import: `format`
 --> src/backend/operand.rs:1:16
  |
1 | use std::fmt::{format, Display};
  |                ^^^^^^

warning: unused imports: `ObjPool`, `ScalarType`
  --> src/backend/regalloc/easy_gc_alloc.rs:10:15
   |
10 |     utility::{ObjPool, ObjPtr, ScalarType}, log_file_uln,
   |               ^^^^^^^          ^^^^^^^^^^

warning: unused imports: `VecDeque`, `format`, `self`
  --> src/backend/regalloc/easy_gc_alloc.rs:14:49
   |
14 |     collections::{HashMap, HashSet, LinkedList, VecDeque},
   |                                                 ^^^^^^^^
15 |     fmt::{self, format},
   |           ^^^^  ^^^^^^

warning: unused import: `fs`
 --> src/backend/regalloc/easy_ls_alloc.rs:3:44
  |
3 | use std::{collections::{HashMap, HashSet}, fs};
  |                                            ^^

warning: unused imports: `ObjPtr`, `ScalarType`, `block`, `frontend::ast::Continue`, `instrs::BB`, `log_file`, `operand::Reg`, `structs::RegUsedStat`
 --> src/backend/regalloc/easy_ls_alloc.rs:5:60
  |
5 | ...self, structs::RegUsedStat}, instrs::BB, operand::Reg, block}, utility::{ObjPtr, ScalarType}, frontend::ast::Continue, log_file};
  |          ^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^             ^^^^^^  ^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^

warning: unused import: `crate::algorithm::graphalgo`
  --> src/backend/regalloc/opt_ls_alloc.rs:11:5
   |
11 | use crate::algorithm::graphalgo;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::algorithm::graphalgo::Graph`
  --> src/backend/regalloc/opt_ls_alloc.rs:12:5
   |
12 | use crate::algorithm::graphalgo::Graph;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `RegUsedStat`
  --> src/backend/regalloc/opt_ls_alloc.rs:16:56
   |
16 | use crate::backend::regalloc::structs::{FuncAllocStat, RegUsedStat};
   |                                                        ^^^^^^^^^^^

warning: unused import: `crate::utility::ScalarType`
  --> src/backend/regalloc/opt_ls_alloc.rs:18:5
   |
18 | use crate::utility::ScalarType;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::borrow::Borrow`
  --> src/backend/regalloc/opt_ls_alloc.rs:19:5
   |
19 | use std::borrow::Borrow;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::VecDeque`
  --> src/backend/regalloc/opt_ls_alloc.rs:23:5
   |
23 | use std::collections::VecDeque;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `HashMap`, `HashSet`, `fs`
  --> src/backend/regalloc/opt_gc_alloc.rs:11:25
   |
11 | use std::{collections::{HashMap, HashSet}, fs};
   |                         ^^^^^^^  ^^^^^^^   ^^

warning: unused import: `fs`
 --> src/backend/regalloc/base_alloc.rs:3:44
  |
3 | use std::{collections::{HashMap, HashSet}, fs};
  |                                            ^^

warning: unused imports: `block`, `container::bitmap::Bitmap`, `frontend::ast::Continue`
 --> src/backend/regalloc/base_alloc.rs:5:87
  |
5 | ...B, operand::Reg, block}, utility::{ObjPtr, ScalarType}, frontend::ast::Continue, log_file, container::bitmap::Bitmap};
  |                     ^^^^^                                  ^^^^^^^^^^^^^^^^^^^^^^^            ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::log_file`
 --> src/backend/regalloc/regalloc.rs:7:5
  |
7 | use crate::log_file;
  |     ^^^^^^^^^^^^^^^

warning: unused imports: `fmt::format`, `fs::File`
 --> src/backend/regalloc/simulate_assign.rs:3:11
  |
3 | use std::{fs::File, fmt::format};
  |           ^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `block`
 --> src/backend/regalloc/simulate_assign.rs:5:37
  |
5 | use crate::{backend::{instrs::Func, block, operand::Reg}, log_file};
  |                                     ^^^^^

warning: unused imports: `LinkedList`, `ptr::NonNull`, `rc::Rc`
 --> src/container/Deque.rs:4:44
  |
4 | use std::{collections::{HashMap, VecDeque, LinkedList}, rc::Rc, ptr::NonNull};
  |                                            ^^^^^^^^^^   ^^^^^^  ^^^^^^^^^^^^

warning: unused import: `InstKind`
 --> src/frontend/context.rs:7:29
  |
7 |         instruction::{Inst, InstKind},
  |                             ^^^^^^^^

warning: unnecessary parentheses around type
   --> src/frontend/context.rs:276:77
    |
276 |     pub fn add_const_float(&mut self, f: f32, inst: ObjPtr<Inst>) -> Option<(ObjPtr<Inst>)> {
    |                                                                             ^            ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
276 -     pub fn add_const_float(&mut self, f: f32, inst: ObjPtr<Inst>) -> Option<(ObjPtr<Inst>)> {
276 +     pub fn add_const_float(&mut self, f: f32, inst: ObjPtr<Inst>) -> Option<ObjPtr<Inst>> {
    |

warning: unnecessary parentheses around type
   --> src/frontend/context.rs:312:51
    |
312 |     pub fn get_const_int(&self, i: i32) -> Option<(ObjPtr<Inst>)> {
    |                                                   ^            ^
    |
help: remove these parentheses
    |
312 -     pub fn get_const_int(&self, i: i32) -> Option<(ObjPtr<Inst>)> {
312 +     pub fn get_const_int(&self, i: i32) -> Option<ObjPtr<Inst>> {
    |

warning: unnecessary parentheses around pattern
   --> src/frontend/context.rs:318:29
    |
318 |                         for ((bbname, inst_vec)) in &self.bb_map {
    |                             ^                  ^
    |
help: remove these parentheses
    |
318 -                         for ((bbname, inst_vec)) in &self.bb_map {
318 +                         for (bbname, inst_vec) in &self.bb_map {
    |

warning: unnecessary parentheses around type
   --> src/frontend/context.rs:346:53
    |
346 |     pub fn get_const_float(&self, f: f32) -> Option<(ObjPtr<Inst>)> {
    |                                                     ^            ^
    |
help: remove these parentheses
    |
346 -     pub fn get_const_float(&self, f: f32) -> Option<(ObjPtr<Inst>)> {
346 +     pub fn get_const_float(&self, f: f32) -> Option<ObjPtr<Inst>> {
    |

warning: unnecessary parentheses around pattern
   --> src/frontend/context.rs:352:29
    |
352 |                         for ((bbname, inst_vec)) in &self.bb_map {
    |                             ^                  ^
    |
help: remove these parentheses
    |
352 -                         for ((bbname, inst_vec)) in &self.bb_map {
352 +                         for (bbname, inst_vec) in &self.bb_map {
    |

warning: unnecessary parentheses around `if` condition
   --> src/frontend/context.rs:389:12
    |
389 |         if (self.has_var_now(s1)) {
    |            ^                    ^
    |
help: remove these parentheses
    |
389 -         if (self.has_var_now(s1)) {
389 +         if self.has_var_now(s1) {
    |

warning: unused import: `std::collections::HashMap`
 --> src/frontend/irgen.rs:1:5
  |
1 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `self`
  --> src/frontend/irgen.rs:11:27
   |
11 | use crate::ir::function::{self, Function};
   |                           ^^^^

warning: unnecessary parentheses around type
  --> src/frontend/irgen.rs:46:20
   |
46 |     type Message = (i32);
   |                    ^   ^
   |
help: remove these parentheses
   |
46 -     type Message = (i32);
46 +     type Message = i32;
   |

warning: unnecessary parentheses around type
  --> src/frontend/irgen.rs:68:20
   |
68 |     type Message = (i32);
   |                    ^   ^
   |
help: remove these parentheses
   |
68 -     type Message = (i32);
68 +     type Message = i32;
   |

warning: unnecessary parentheses around type
   --> src/frontend/irgen.rs:217:20
    |
217 |     type Message = (i32);
    |                    ^   ^
    |
help: remove these parentheses
    |
217 -     type Message = (i32);
217 +     type Message = i32;
    |

warning: unnecessary parentheses around type
   --> src/frontend/irgen.rs:239:20
    |
239 |     type Message = (i32);
    |                    ^   ^
    |
help: remove these parentheses
    |
239 -     type Message = (i32);
239 +     type Message = i32;
    |

warning: unnecessary parentheses around type
   --> src/frontend/irgen.rs:619:20
    |
619 |     type Message = (i32);
    |                    ^   ^
    |
help: remove these parentheses
    |
619 -     type Message = (i32);
619 +     type Message = i32;
    |

warning: unnecessary parentheses around pattern
   --> src/frontend/irgen.rs:900:42
    |
900 |                         VarDef::NonArray((id)) => {
    |                                          ^  ^
    |
help: remove these parentheses
    |
900 -                         VarDef::NonArray((id)) => {
900 +                         VarDef::NonArray(id) => {
    |

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:1064:20
     |
1064 |     type Message = (i32);
     |                    ^   ^
     |
help: remove these parentheses
     |
1064 -     type Message = (i32);
1064 +     type Message = i32;
     |

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:1336:20
     |
1336 |     type Message = (i32);
     |                    ^   ^
     |
help: remove these parentheses
     |
1336 -     type Message = (i32);
1336 +     type Message = i32;
     |

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:1349:20
     |
1349 |     type Message = (i32);
     |                    ^   ^
     |
help: remove these parentheses
     |
1349 -     type Message = (i32);
1349 +     type Message = i32;
     |

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:2030:20
     |
2030 |     type Message = (Type);
     |                    ^    ^
     |
help: remove these parentheses
     |
2030 -     type Message = (Type);
2030 +     type Message = Type;
     |

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:2049:20
     |
2049 |     type Message = (Type);
     |                    ^    ^
     |
help: remove these parentheses
     |
2049 -     type Message = (Type);
2049 +     type Message = Type;
     |

warning: unused doc comment
    --> src/frontend/irgen.rs:2097:17
     |
2097 |                   ///介里维度
     |                   ^^^^^^^^^^^
2098 | /                 match val {
2099 | |                     ExpValue::Int(i) => {
2100 | |                         let inst_base_now =
2101 | |                             kit_mut.pool_inst_mut.make_int_const(inst_base_vec[index]); //构造base对应的inst
...    |
2125 | |                     }
2126 | |                 }
     | |_________________- rustdoc does not generate documentation for expressions
     |
     = help: use `//` for a plain comment
     = note: `#[warn(unused_doc_comments)]` on by default

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:2401:20
     |
2401 |     type Message = (Type);
     |                    ^    ^
     |
help: remove these parentheses
     |
2401 -     type Message = (Type);
2401 +     type Message = Type;
     |

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:2413:20
     |
2413 |     type Message = (Type);
     |                    ^    ^
     |
help: remove these parentheses
     |
2413 -     type Message = (Type);
2413 +     type Message = Type;
     |

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:2504:20
     |
2504 |     type Message = (Vec<Type>);
     |                    ^         ^
     |
help: remove these parentheses
     |
2504 -     type Message = (Vec<Type>);
2504 +     type Message = Vec<Type>;
     |

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:2515:20
     |
2515 |     type Message = (Type);
     |                    ^    ^
     |
help: remove these parentheses
     |
2515 -     type Message = (Type);
2515 +     type Message = Type;
     |

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:2722:20
     |
2722 |     type Message = (i32);
     |                    ^   ^
     |
help: remove these parentheses
     |
2722 -     type Message = (i32);
2722 +     type Message = i32;
     |

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:2730:20
     |
2730 |     type Message = (Vec<Type>);
     |                    ^         ^
     |
help: remove these parentheses
     |
2730 -     type Message = (Vec<Type>);
2730 +     type Message = Vec<Type>;
     |

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:2748:20
     |
2748 |     type Message = (Type);
     |                    ^    ^
     |
help: remove these parentheses
     |
2748 -     type Message = (Type);
2748 +     type Message = Type;
     |

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:2862:20
     |
2862 |     type Message = (Type);
     |                    ^    ^
     |
help: remove these parentheses
     |
2862 -     type Message = (Type);
2862 +     type Message = Type;
     |

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:2940:20
     |
2940 |     type Message = (i32);
     |                    ^   ^
     |
help: remove these parentheses
     |
2940 -     type Message = (i32);
2940 +     type Message = i32;
     |

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:2948:20
     |
2948 |     type Message = (Type);
     |                    ^    ^
     |
help: remove these parentheses
     |
2948 -     type Message = (Type);
2948 +     type Message = Type;
     |

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:3140:20
     |
3140 |     type Message = (Type); //第一个为true,第二个为false //if中默认给Type::Int
     |                    ^    ^
     |
help: remove these parentheses
     |
3140 -     type Message = (Type); //第一个为true,第二个为false //if中默认给Type::Int
3140 +     type Message = Type; //第一个为true,第二个为false //if中默认给Type::Int
     |

warning: unnecessary parentheses around type
    --> src/frontend/irgen.rs:3449:20
     |
3449 |     type Message = (Type);
     |                    ^    ^
     |
help: remove these parentheses
     |
3449 -     type Message = (Type);
3449 +     type Message = Type;
     |

warning: unnecessary parentheses around type
   --> src/frontend/kit.rs:156:47
    |
156 |     pub fn get_functions(&self) -> Option<Vec<(ObjPtr<Function>)>> {
    |                                               ^                ^
    |
help: remove these parentheses
    |
156 -     pub fn get_functions(&self) -> Option<Vec<(ObjPtr<Function>)>> {
156 +     pub fn get_functions(&self) -> Option<Vec<ObjPtr<Function>>> {
    |

warning: unreachable expression
  --> src/backend/regalloc/opt_ls_alloc.rs:86:61
   |
86 |         FuncAllocStat { stack_size:todo!(), bb_stack_sizes: todo!(), spillings: todo!(), dstr:todo!()  }
   |                                    -------                  ^^^^^^^ unreachable expression
   |                                    |
   |                                    any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default
   = note: this warning originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unreachable statement
  --> src/frontend/irgen.rs:62:9
   |
61 |         return Ok(1);
   |         ------------ any code following this expression is unreachable
62 |         todo!();
   |         ^^^^^^^ unreachable statement
   |
   = note: this warning originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unreachable expression
   --> src/frontend/irgen.rs:499:9
    |
241 | /         match self.btype {
242 | |             BType::Int => {
243 | |                 for def in &mut self.const_def_vec {
244 | |                     if def.const_exp_vec.is_empty() {
...   |
497 | |             }
498 | |         }
    | |_________- any code following this `match` expression is unreachable, as all arms diverge
499 |           Ok(1)
    |           ^^^^^ unreachable expression

warning: unreachable pattern
    --> src/frontend/irgen.rs:1054:25
     |
1054 |                         _ => todo!(),
     |                         ^
     |
     = note: `#[warn(unreachable_patterns)]` on by default

warning: unreachable pattern
    --> src/frontend/irgen.rs:2715:13
     |
2715 |             _ => unreachable!(),
     |             ^

warning: unused variable: `node`
  --> src/algorithm/graphalgo.rs:52:28
   |
52 |     pub fn isSerial(&self, node: i32) -> bool {
   |                            ^^^^ help: if this is intentional, prefix it with an underscore: `_node`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `que`
  --> src/algorithm/graphalgo.rs:69:21
   |
69 |             let mut que: VecDeque<i32> = VecDeque::new();
   |                     ^^^ help: if this is intentional, prefix it with an underscore: `_que`

warning: unused variable: `adder`
  --> src/algorithm/graphalgo.rs:97:18
   |
97 |             let (adder, cur, val) = stack.pop_back().unwrap();
   |                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_adder`

warning: unused variable: `from`
   --> src/algorithm/graphalgo.rs:140:52
    |
140 |     pub fn bfs_estimateMaxNodeValuePath(&mut self, from: i32, tos: HashSet<i32>) -> T {
    |                                                    ^^^^ help: if this is intentional, prefix it with an underscore: `_from`

warning: unused variable: `tos`
   --> src/algorithm/graphalgo.rs:140:63
    |
140 |     pub fn bfs_estimateMaxNodeValuePath(&mut self, from: i32, tos: HashSet<i32>) -> T {
    |                                                               ^^^ help: if this is intentional, prefix it with an underscore: `_tos`

warning: unused variable: `i`
   --> src/backend/asm_builder.rs:220:17
    |
220 |             for i in 0..size {
    |                 ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `i`
   --> src/backend/asm_builder.rs:233:17
    |
233 |             for i in 0..size {
    |                 ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: value assigned to `lhs_reg` is never read
   --> src/backend/block.rs:623:37
    |
623 | ...                   let mut lhs_reg = Operand::IImm(IImm::new(0));
    |                               ^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: value assigned to `rhs_reg` is never read
   --> src/backend/block.rs:624:37
    |
624 | ...                   let mut rhs_reg = Operand::IImm(IImm::new(0));
    |                               ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `kind` is never read
    --> src/backend/block.rs:1143:29
     |
1143 |                     let mut kind = ScalarType::Void;
     |                             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `lhs_reg` is never read
    --> src/backend/block.rs:1907:17
     |
1907 |         let mut lhs_reg = Operand::IImm(IImm::new(0));
     |                 ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `rhs_reg` is never read
    --> src/backend/block.rs:1908:17
     |
1908 |         let mut rhs_reg = Operand::IImm(IImm::new(0));
     |                 ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `delta` is never read
    --> src/backend/block.rs:2176:50
     |
2176 |                     let (two31, uabs, mut p, mut delta) =
     |                                                  ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `is_neg`
    --> src/backend/block.rs:2242:13
     |
2242 |         let is_neg = imm < 0;
     |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_is_neg`

warning: unused variable: `imm`
    --> src/backend/block.rs:2316:15
     |
2316 | fn is_opt_mul(imm: i32) -> bool {
     |               ^^^ help: if this is intentional, prefix it with an underscore: `_imm`

warning: variable `size` is assigned to, but never used
   --> src/backend/func.rs:182:17
    |
182 |         let mut size = 0;
    |                 ^^^^
    |
    = note: consider using `_size` instead

warning: unused variable: `inst`
   --> src/backend/func.rs:224:17
    |
224 |             for inst in block.insts.iter() {
    |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_inst`

warning: value assigned to `offset` is never read
   --> src/backend/func.rs:492:17
    |
492 |         let mut offset = 0;
    |                 ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `pool`
   --> src/backend/func.rs:540:31
    |
540 |     fn save_callee(&mut self, pool: &mut BackendPool, f: &mut File) {
    |                               ^^^^ help: if this is intentional, prefix it with an underscore: `_pool`

warning: unused variable: `icnt`
   --> src/backend/func.rs:578:14
    |
578 |         let (icnt, fcnt) = self.param_cnt;
    |              ^^^^ help: if this is intentional, prefix it with an underscore: `_icnt`

warning: unused variable: `fcnt`
   --> src/backend/func.rs:578:20
    |
578 |         let (icnt, fcnt) = self.param_cnt;
    |                    ^^^^ help: if this is intentional, prefix it with an underscore: `_fcnt`

warning: variable `size` is assigned to, but never used
   --> src/backend/func.rs:651:17
    |
651 |         let mut size = 0;
    |                 ^^^^
    |
    = note: consider using `_size` instead

warning: variable `size` is assigned to, but never used
   --> src/backend/func.rs:690:17
    |
690 |         let mut size = 0;
    |                 ^^^^
    |
    = note: consider using `_size` instead

warning: value assigned to `kind` is never read
   --> src/backend/instrs.rs:125:17
    |
125 |         let mut kind = "";
    |                 ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `inst`
   --> src/backend/module.rs:145:14
    |
145 |         for (inst, iter) in self.global_var_list.iter() {
    |              ^^^^ help: if this is intentional, prefix it with an underscore: `_inst`

warning: unused variable: `bb`
  --> src/backend/regalloc/local_ls_alloc.rs:14:28
   |
14 |     fn ilr_alloc_for_block(bb:ObjPtr<BB>){
   |                            ^^ help: if this is intentional, prefix it with an underscore: `_bb`

warning: unused variable: `func`
  --> src/backend/regalloc/local_ls_alloc.rs:20:25
   |
20 |     fn alloc(&mut self, func: &crate::backend::instrs::Func) -> super::structs::FuncAllocStat {
   |                         ^^^^ help: if this is intentional, prefix it with an underscore: `_func`

warning: unused variable: `bb`
  --> src/backend/regalloc/opt_ls_alloc.rs:75:20
   |
75 |     fn alloc_block(bb:ObjPtr<BB>){
   |                    ^^ help: if this is intentional, prefix it with an underscore: `_bb`

warning: unused variable: `func`
  --> src/backend/regalloc/opt_ls_alloc.rs:83:25
   |
83 |     fn alloc(&mut self, func: &Func) -> FuncAllocStat {
   |                         ^^^^ help: if this is intentional, prefix it with an underscore: `_func`

warning: value assigned to `color` is never read
   --> src/backend/regalloc/base_alloc.rs:188:21
    |
188 |             let mut color=Option::None;
    |                     ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `has_defined`
  --> src/backend/regalloc/regalloc.rs:81:17
   |
81 |         let mut has_defined:HashSet<Reg>=HashSet::new();
   |                 ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_has_defined`

warning: unused variable: `passed_regs`
   --> src/backend/regalloc/regalloc.rs:186:21
    |
186 |             let mut passed_regs: HashSet<Reg> = HashSet::new();
    |                     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_passed_regs`

warning: unused variable: `index`
   --> src/backend/regalloc/regalloc.rs:307:14
    |
307 |         for (index, inst) in bb.insts.iter().enumerate() {
    |              ^^^^^ help: if this is intentional, prefix it with an underscore: `_index`

warning: unused variable: `ends_index_bb`
   --> src/backend/regalloc/regalloc.rs:302:18
    |
302 |                  ends_index_bb: &HashMap<(i32, ObjPtr<BB>), HashSet<Reg>>,
    |                  ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_ends_index_bb`

warning: value assigned to `cost` is never read
   --> src/backend/regalloc/regalloc.rs:547:13
    |
547 |     let mut cost:i32 = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `dstr`
   --> src/backend/regalloc/regalloc.rs:545:32
    |
545 | pub fn eval_alloc(func: &Func, dstr: & HashMap<i32, i32>, spillings: &HashSet<i32>)->i32{
    |                                ^^^^ help: if this is intentional, prefix it with an underscore: `_dstr`

warning: unused variable: `m`
  --> src/backend/regalloc/structs.rs:76:13
   |
76 |         let m:Range<i32>;
   |             ^ help: if this is intentional, prefix it with an underscore: `_m`

warning: unused variable: `row_path`
  --> src/backend/mod.rs:61:48
   |
61 | pub fn generate_asm(in_path: &str, path: &str, row_path: &str, module: &mut AsmModule) {
   |                                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_row_path`

warning: unused variable: `i`
  --> src/container/prioritydeque.rs:64:14
   |
64 |         for (i,v) in self.arr.iter().enumerate() {
   |              ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `s`
   --> src/frontend/context.rs:152:27
    |
152 |     pub fn get_var(&self, s: &str, bbname: &str) {}
    |                           ^ help: if this is intentional, prefix it with an underscore: `_s`

warning: unused variable: `bbname`
   --> src/frontend/context.rs:152:36
    |
152 |     pub fn get_var(&self, s: &str, bbname: &str) {}
    |                                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_bbname`

warning: unused variable: `bbname`
   --> src/frontend/context.rs:318:31
    |
318 |                         for ((bbname, inst_vec)) in &self.bb_map {
    |                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_bbname`

warning: unused variable: `bbname`
   --> src/frontend/context.rs:352:31
    |
352 |                         for ((bbname, inst_vec)) in &self.bb_map {
    |                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_bbname`

warning: unused variable: `name_changed`
   --> src/frontend/context.rs:452:26
    |
452 |                     let (name_changed, _) = vec.remove(index);
    |                          ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_name_changed`

warning: value assigned to `inst_ptr` is never read
   --> src/frontend/irgen.rs:246:34
    |
246 |                         let (mut inst_ptr, mut val, _) = def
    |                                  ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `bond` is never read
   --> src/frontend/irgen.rs:251:33
    |
251 |                         let mut bond = 0;
    |                                 ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `inst_ptr`
   --> src/frontend/irgen.rs:329:34
    |
329 |                         let (mut inst_ptr, mut val, init_vec) = def
    |                                  ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inst_ptr`

warning: unused variable: `val`
   --> src/frontend/irgen.rs:329:48
    |
329 |                         let (mut inst_ptr, mut val, init_vec) = def
    |                                                ^^^ help: if this is intentional, prefix it with an underscore: `_val`

warning: unused variable: `fvec`
   --> src/frontend/irgen.rs:334:47
    |
334 | ...                   RetInitVec::Float(fvec) => {
    |                                         ^^^^ help: if this is intentional, prefix it with an underscore: `_fvec`

warning: value assigned to `inst_ptr` is never read
   --> src/frontend/irgen.rs:376:34
    |
376 |                         let (mut inst_ptr, mut val, _) = def
    |                                  ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `bond` is never read
   --> src/frontend/irgen.rs:381:33
    |
381 |                         let mut bond = 0.0;
    |                                 ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `inst_ptr`
   --> src/frontend/irgen.rs:458:34
    |
458 |                         let (mut inst_ptr, mut val, init_vec) = def
    |                                  ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inst_ptr`

warning: unused variable: `val`
   --> src/frontend/irgen.rs:458:48
    |
458 |                         let (mut inst_ptr, mut val, init_vec) = def
    |                                                ^^^ help: if this is intentional, prefix it with an underscore: `_val`

warning: unused variable: `ivec`
   --> src/frontend/irgen.rs:490:45
    |
490 | ...                   RetInitVec::Int(ivec) => {
    |                                       ^^^^ help: if this is intentional, prefix it with an underscore: `_ivec`

warning: unused variable: `input`
   --> src/frontend/irgen.rs:240:27
    |
240 |     fn process(&mut self, input: Self::Message, kit_mut: &mut Kit) -> Result<Self::Ret, Error> {
    |                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_input`

warning: unused variable: `f`
   --> src/frontend/irgen.rs:312:49
    |
312 | ...                   ExpValue::Float(f) => {
    |                                       ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: unused variable: `f`
   --> src/frontend/irgen.rs:441:49
    |
441 | ...                   ExpValue::Float(f) => {
    |                                       ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: unused variable: `val_vec`
   --> src/frontend/irgen.rs:675:49
    |
675 | ...                   InitVal::InitValVec(val_vec) => {
    |                                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_val_vec`

warning: unused variable: `val_vec`
   --> src/frontend/irgen.rs:896:49
    |
896 | ...                   InitVal::InitValVec(val_vec) => {
    |                                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_val_vec`

warning: unused variable: `input`
   --> src/frontend/irgen.rs:620:27
    |
620 |     fn process(&mut self, input: Self::Message, kit_mut: &mut Kit) -> Result<Self::Ret, Error> {
    |                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_input`

warning: unused variable: `f`
   --> src/frontend/irgen.rs:726:53
    |
726 | ...                   ExpValue::Float(f) => {
    |                                       ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: unused variable: `f`
   --> src/frontend/irgen.rs:810:53
    |
810 | ...                   ExpValue::Float(f) => {
    |                                       ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: unused variable: `f`
   --> src/frontend/irgen.rs:943:53
    |
943 | ...                   ExpValue::Float(f) => {
    |                                       ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: unused variable: `f`
    --> src/frontend/irgen.rs:1016:53
     |
1016 | ...                   ExpValue::Float(f) => {
     |                                       ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: unused variable: `input`
    --> src/frontend/irgen.rs:1065:27
     |
1065 |     fn process(&mut self, input: Self::Message, kit_mut: &mut Kit) -> Result<Self::Ret, Error> {
     |                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_input`

warning: unused variable: `kit_mut`
    --> src/frontend/irgen.rs:1065:49
     |
1065 |     fn process(&mut self, input: Self::Message, kit_mut: &mut Kit) -> Result<Self::Ret, Error> {
     |                                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_kit_mut`

warning: unused variable: `dimension`
    --> src/frontend/irgen.rs:1076:26
     |
1076 |                 let (tp, dimension, num_precessor, layer_now) = input;
     |                          ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dimension`

warning: unused variable: `layer_now`
    --> src/frontend/irgen.rs:1076:52
     |
1076 |                 let (tp, dimension, num_precessor, layer_now) = input;
     |                                                    ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_layer_now`

warning: unused variable: `exp`
    --> src/frontend/irgen.rs:1148:38
     |
1148 |                         InitVal::Exp(exp) => {
     |                                      ^^^ help: if this is intentional, prefix it with an underscore: `_exp`

warning: unused variable: `inst_list`
    --> src/frontend/irgen.rs:1161:53
     |
1161 | ...                   if let Some(inst_list) = inst {
     |                                   ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inst_list`

warning: unused variable: `inst_list`
    --> src/frontend/irgen.rs:1171:53
     |
1171 | ...                   if let Some(inst_list) = inst {
     |                                   ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inst_list`

warning: unused variable: `initvec`
    --> src/frontend/irgen.rs:1180:45
     |
1180 |                         InitVal::InitValVec(initvec) => {
     |                                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_initvec`

warning: unused variable: `inst_list`
    --> src/frontend/irgen.rs:1193:53
     |
1193 | ...                   if let Some(inst_list) = inst {
     |                                   ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inst_list`

warning: unused variable: `inst_list`
    --> src/frontend/irgen.rs:1203:53
     |
1203 | ...                   if let Some(inst_list) = inst {
     |                                   ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inst_list`

warning: unused variable: `input`
    --> src/frontend/irgen.rs:1236:27
     |
1236 |     fn process(&mut self, input: Self::Message, kit_mut: &mut Kit) -> Result<Self::Ret, Error> {
     |                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_input`

warning: unused variable: `inst`
    --> src/frontend/irgen.rs:1363:30
     |
1363 |                         for (inst, dimension) in dimension_vec {
     |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_inst`

warning: unused variable: `inst`
    --> src/frontend/irgen.rs:1394:30
     |
1394 |                         for (inst, dimension) in dimension_vec {
     |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_inst`

warning: unused variable: `input`
    --> src/frontend/irgen.rs:1350:27
     |
1350 |     fn process(&mut self, input: Self::Message, kit_mut: &mut Kit) -> Result<Self::Ret, Error> {
     |                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_input`

warning: value assigned to `mes` is never read
    --> src/frontend/irgen.rs:1553:17
     |
1553 |         let mut mes = Type::Int;
     |                 ^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `input`
    --> src/frontend/irgen.rs:1548:27
     |
1548 |     fn process(&mut self, input: Self::Message, kit_mut: &mut Kit) -> Result<Self::Ret, Error> {
     |                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_input`

warning: unused variable: `inst_cond`
    --> src/frontend/irgen.rs:1667:18
     |
1667 |             let (inst_cond, val_cond) = self
     |                  ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inst_cond`

warning: unused variable: `val_cond`
    --> src/frontend/irgen.rs:1667:29
     |
1667 |             let (inst_cond, val_cond) = self
     |                             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_val_cond`

warning: unused variable: `inst_cond`
    --> src/frontend/irgen.rs:1737:18
     |
1737 |             let (inst_cond, val_cond) = self
     |                  ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inst_cond`

warning: unused variable: `val_cond`
    --> src/frontend/irgen.rs:1737:29
     |
1737 |             let (inst_cond, val_cond) = self
     |                             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_val_cond`

warning: unused variable: `inst_cond`
    --> src/frontend/irgen.rs:1798:14
     |
1798 |         let (inst_cond, val_cond) = self
     |              ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inst_cond`

warning: unused variable: `val_cond`
    --> src/frontend/irgen.rs:1798:25
     |
1798 |         let (inst_cond, val_cond) = self
     |                         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_val_cond`

warning: unused variable: `input`
    --> src/frontend/irgen.rs:1908:27
     |
1908 |     fn process(&mut self, input: Self::Message, kit_mut: &mut Kit) -> Result<Self::Ret, Error> {
     |                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_input`

warning: value assigned to `var` is never read
    --> src/frontend/irgen.rs:2054:18
     |
2054 |         let (mut var, mut symbol) = (
     |                  ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `symbol` is never read
    --> src/frontend/irgen.rs:2054:27
     |
2054 |         let (mut var, mut symbol) = (
     |                           ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `inst_offset_temp`
    --> src/frontend/irgen.rs:2074:21
     |
2074 |                 let inst_offset_temp = kit_mut.pool_inst_mut.make_int_const(0);
     |                     ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inst_offset_temp`

warning: unused variable: `f`
    --> src/frontend/irgen.rs:2112:37
     |
2112 |                     ExpValue::Float(f) => {
     |                                     ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: value assigned to `inst_offset` is never read
    --> src/frontend/irgen.rs:2129:21
     |
2129 |             let mut inst_offset = kit_mut.pool_inst_mut.make_int_const(-1129);
     |                     ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `inst_base_now` is never read
    --> src/frontend/irgen.rs:2130:21
     |
2130 |             let mut inst_base_now = kit_mut.pool_inst_mut.make_int_const(-1129);
     |                     ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `inst` is never read
    --> src/frontend/irgen.rs:2530:29
     |
2530 |                     let mut inst = inst_u;
     |                             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `val_ret` is never read
    --> src/frontend/irgen.rs:2532:29
     |
2532 |                     let mut val_ret = val;
     |                             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `inst` is never read
    --> src/frontend/irgen.rs:2588:29
     |
2588 |                     let mut inst = inst_u;
     |                             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `val_ret` is never read
    --> src/frontend/irgen.rs:2589:29
     |
2589 |                     let mut val_ret = val;
     |                             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `input`
    --> src/frontend/irgen.rs:2723:27
     |
2723 |     fn process(&mut self, input: Self::Message, kit_mut: &mut Kit) -> Result<Self::Ret, Error> {
     |                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_input`

warning: unused variable: `kit_mut`
    --> src/frontend/irgen.rs:2723:49
     |
2723 |     fn process(&mut self, input: Self::Message, kit_mut: &mut Kit) -> Result<Self::Ret, Error> {
     |                                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_kit_mut`

warning: value assigned to `val_ret` is never read
    --> src/frontend/irgen.rs:2757:25
     |
2757 |                 let mut val_ret = lval;
     |                         ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `val_ret` is never read
    --> src/frontend/irgen.rs:2789:25
     |
2789 |                 let mut val_ret = lval;
     |                         ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `val_ret` is never read
    --> src/frontend/irgen.rs:2821:25
     |
2821 |                 let mut val_ret = lval;
     |                         ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `val_ret` is never read
    --> src/frontend/irgen.rs:2825:29
     |
2825 | ...                   val_ret = ExpValue::Float(f1 % f2);
     |                       ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `inst` is never read
    --> src/frontend/irgen.rs:2826:29
     |
2826 | ...                   inst = kit_mut.pool_inst_mut.make_float_const(f1 % f2);
     |                       ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `val_ret` is never read
    --> src/frontend/irgen.rs:2873:29
     |
2873 |                     let mut val_ret = lval;
     |                             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `val_ret` is never read
    --> src/frontend/irgen.rs:2907:29
     |
2907 |                     let mut val_ret = lval;
     |                             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `input`
    --> src/frontend/irgen.rs:2941:27
     |
2941 |     fn process(&mut self, input: Self::Message, kit_mut: &mut Kit) -> Result<Self::Ret, Error> {
     |                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_input`

warning: unused variable: `kit_mut`
    --> src/frontend/irgen.rs:2941:49
     |
2941 |     fn process(&mut self, input: Self::Message, kit_mut: &mut Kit) -> Result<Self::Ret, Error> {
     |                                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_kit_mut`

warning: value assigned to `inst_cond` is never read
    --> src/frontend/irgen.rs:2996:25
     |
2996 |                 let mut inst_cond = kit_mut.pool_inst_mut.make_int_const(-1129);
     |                         ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `inst_left`
    --> src/frontend/irgen.rs:3361:26
     |
3361 |                 let (mut inst_left, val_left) = landexp
     |                          ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inst_left`

warning: unused variable: `val_left`
    --> src/frontend/irgen.rs:3361:37
     |
3361 |                 let (mut inst_left, val_left) = landexp
     |                                     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_val_left`

warning: unused variable: `val_right`
    --> src/frontend/irgen.rs:3365:38
     |
3365 |                 let (mut inst_right, val_right) = eqexp.process(input.0, kit_mut).unwrap();
     |                                      ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_val_right`

warning: unused variable: `val_left`
    --> src/frontend/irgen.rs:3464:33
     |
3464 |                 let (inst_left, val_left) = lorexp
     |                                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_val_left`

warning: unused variable: `inst_right`
    --> src/frontend/irgen.rs:3468:22
     |
3468 |                 let (inst_right, val_right) = landexp.process(input, kit_mut).unwrap();
     |                      ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inst_right`

warning: unused variable: `val_right`
    --> src/frontend/irgen.rs:3468:34
     |
3468 |                 let (inst_right, val_right) = landexp.process(input, kit_mut).unwrap();
     |                                  ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_val_right`

warning: unused variable: `var`
    --> src/frontend/irgen.rs:3526:14
     |
3526 |     let (mut var, mut symbol) = (
     |              ^^^ help: if this is intentional, prefix it with an underscore: `_var`

warning: unused variable: `f`
    --> src/frontend/irgen.rs:3570:29
     |
3570 |             ExpValue::Float(f) => {
     |                             ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: value assigned to `inst_offset` is never read
    --> src/frontend/irgen.rs:3586:13
     |
3586 |     let mut inst_offset = kit_mut.pool_inst_mut.make_int_const(-1129);
     |             ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `inst_base_now` is never read
    --> src/frontend/irgen.rs:3587:13
     |
3587 |     let mut inst_base_now = kit_mut.pool_inst_mut.make_int_const(-1129);
     |             ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `vec_funcs` is never read
   --> src/frontend/kit.rs:158:17
    |
158 |         let mut vec_funcs = vec![];
    |                 ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `x`
   --> src/frontend/kit.rs:165:24
    |
165 |                 .map(|(x, y)| *y)
    |                        ^ help: if this is intentional, prefix it with an underscore: `_x`

warning: unused variable: `is_padded_temp`
   --> src/frontend/kit.rs:180:36
    |
180 |         if let Some((vec_phi_temp, is_padded_temp)) = option_phi {
    |                                    ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_is_padded_temp`

warning: unused variable: `phi_is_padded`
   --> src/frontend/kit.rs:190:38
    |
190 |         for (name_changed, inst_phi, phi_is_padded) in vec_phi.clone() {
    |                                      ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_phi_is_padded`

warning: value assigned to `vec_phi` is never read
   --> src/frontend/kit.rs:217:17
    |
217 |                 vec_phi = vec_phi_temp.clone();
    |                 ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `is_padded`
   --> src/frontend/kit.rs:565:40
    |
565 |                 if let Some((phi_list, is_padded)) =
    |                                        ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_is_padded`

warning: unused variable: `inst_opt`
   --> src/frontend/kit.rs:643:21
    |
643 |                 let inst_opt = self
    |                     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_inst_opt`

warning: value assigned to `inst_ret` is never read
   --> src/frontend/kit.rs:718:25
    |
718 |                 let mut inst_ret = self.pool_inst_mut.make_int_const(-1129);
    |                         ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `bb`
   --> src/frontend/kit.rs:794:62
    |
794 | ...                   InfuncChoice::InFunc(bb) => {
    |                                            ^^ help: if this is intentional, prefix it with an underscore: `_bb`

warning: unused variable: `bb`
   --> src/frontend/kit.rs:802:62
    |
802 | ...                   InfuncChoice::InFunc(bb) => {
    |                                            ^^ help: if this is intentional, prefix it with an underscore: `_bb`

warning: unused variable: `relexp`
  --> src/frontend/typesearch.rs:24:28
   |
24 |             RelExp::OpExp((relexp, _, addexp)) => {
   |                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_relexp`

warning: unused variable: `addexp`
  --> src/frontend/typesearch.rs:24:39
   |
24 |             RelExp::OpExp((relexp, _, addexp)) => {
   |                                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_addexp`

warning: unused variable: `op`
  --> src/frontend/typesearch.rs:51:36
   |
51 |             AddExp::OpExp((addexp, op, mulexp)) => {
   |                                    ^^ help: if this is intentional, prefix it with an underscore: `_op`

warning: unused variable: `eqexp`
   --> src/frontend/typesearch.rs:178:30
    |
178 |             EqExp::EqualExp((eqexp, relexp)) | EqExp::NotEqualExp((eqexp, relexp)) => {
    |                              ^^^^^                                 ^^^^^
    |
help: if this is intentional, prefix it with an underscore
    |
178 |             EqExp::EqualExp((_eqexp, relexp)) | EqExp::NotEqualExp((_eqexp, relexp)) => {
    |                              ~~~~~~                                 ~~~~~~

warning: unused variable: `relexp`
   --> src/frontend/typesearch.rs:178:37
    |
178 |             EqExp::EqualExp((eqexp, relexp)) | EqExp::NotEqualExp((eqexp, relexp)) => {
    |                                     ^^^^^^                                ^^^^^^
    |
help: if this is intentional, prefix it with an underscore
    |
178 |             EqExp::EqualExp((eqexp, _relexp)) | EqExp::NotEqualExp((eqexp, _relexp)) => {
    |                                     ~~~~~~~                                ~~~~~~~

warning: unused variable: `i`
  --> src/frontend/mod.rs:39:9
   |
39 |     for i in 0..need {
   |         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `i`
  --> src/frontend/mod.rs:52:9
   |
52 |     for i in 0..need {
   |         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: variable does not need to be mutable
  --> src/algorithm/graphalgo.rs:69:17
   |
69 |             let mut que: VecDeque<i32> = VecDeque::new();
   |                 ----^^^
   |                 |
   |                 help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> src/backend/block.rs:95:25
   |
95 |                     let mut lhs_reg;
   |                         ----^^^^^^^
   |                         |
   |                         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/backend/block.rs:96:25
   |
96 |                     let mut rhs_reg;
   |                         ----^^^^^^^
   |                         |
   |                         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/backend/block.rs:97:25
   |
97 |                     let mut dst_reg: Operand =
   |                         ----^^^^^^^
   |                         |
   |                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/backend/block.rs:351:33
    |
351 | ...                   let mut src_reg;
    |                           ----^^^^^^^
    |                           |
    |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/backend/block.rs:1371:29
     |
1371 |                         let mut pos = last_slot.get_pos() + last_slot.get_size();
     |                             ----^^^
     |                             |
     |                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/backend/func.rs:206:25
    |
206 |             if let Some(mut target) = info.phis_to_block.get_mut(&block.label) {
    |                         ----^^^^^^
    |                         |
    |                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/backend/func.rs:416:13
    |
416 |         let mut alloc_stat = allocator.alloc(self);
    |             ----^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/backend/instrs.rs:389:21
    |
389 |                 let mut regs = self.operands.clone();
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/backend/regalloc/easy_gc_alloc.rs:80:13
   |
80 |         let mut i=0;
   |             ----^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/backend/regalloc/easy_gc_alloc.rs:118:13
    |
118 |         let mut out =false;
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/backend/regalloc/easy_ls_alloc.rs:20:13
   |
20 |         let mut dstr:HashMap<i32,i32>=HashMap::new();
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/backend/regalloc/easy_ls_alloc.rs:21:13
   |
21 |         let mut spillings:HashSet<i32>=HashSet::new();
   |             ----^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/backend/regalloc/base_alloc.rs:42:13
   |
42 |         let mut unusable=HashSet::from([0]);
   |             ----^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/backend/regalloc/regalloc.rs:81:13
   |
81 |         let mut has_defined:HashSet<Reg>=HashSet::new();
   |             ----^^^^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/backend/regalloc/regalloc.rs:186:17
    |
186 |             let mut passed_regs: HashSet<Reg> = HashSet::new();
    |                 ----^^^^^^^^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
  --> src/backend/regalloc/structs.rs:55:13
   |
55 |         let mut unusable:HashSet<i32>=HashSet::from([]);
   |             ----^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/container/bitmap.rs:56:13
   |
56 |         let mut v=&mut self.arr[i/64];
   |             ----^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/frontend/irgen.rs:246:44
    |
246 |                         let (mut inst_ptr, mut val, _) = def
    |                                            ----^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/frontend/irgen.rs:329:30
    |
329 |                         let (mut inst_ptr, mut val, init_vec) = def
    |                              ----^^^^^^^^
    |                              |
    |                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/frontend/irgen.rs:329:44
    |
329 |                         let (mut inst_ptr, mut val, init_vec) = def
    |                                            ----^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/frontend/irgen.rs:376:44
    |
376 |                         let (mut inst_ptr, mut val, _) = def
    |                                            ----^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/frontend/irgen.rs:458:30
    |
458 |                         let (mut inst_ptr, mut val, init_vec) = def
    |                              ----^^^^^^^^
    |                              |
    |                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/frontend/irgen.rs:458:44
    |
458 |                         let (mut inst_ptr, mut val, init_vec) = def
    |                                            ----^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/frontend/irgen.rs:627:52
    |
627 | ...                   let (mut inst_ptr, mut val) =
    |                                          ----^^^
    |                                          |
    |                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/frontend/irgen.rs:756:34
    |
756 | ...                   let (mut init_vec, mut inst_vec) = val
    |                            ----^^^^^^^^
    |                            |
    |                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/frontend/irgen.rs:756:48
    |
756 | ...                   let (mut init_vec, mut inst_vec) = val
    |                                          ----^^^^^^^^
    |                                          |
    |                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/frontend/irgen.rs:831:33
    |
831 | ...                   let mut ivec = vec![];
    |                           ----^^^^
    |                           |
    |                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/frontend/irgen.rs:961:34
    |
961 | ...                   let (mut init_vec, mut inst_vec) = val
    |                            ----^^^^^^^^
    |                            |
    |                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/frontend/irgen.rs:961:48
    |
961 | ...                   let (mut init_vec, mut inst_vec) = val
    |                                          ----^^^^^^^^
    |                                          |
    |                                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/frontend/irgen.rs:1037:33
     |
1037 | ...                   let mut fvec = vec![];
     |                           ----^^^^
     |                           |
     |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/frontend/irgen.rs:2529:26
     |
2529 |                     let (mut inst_u, mut val) = unaryexp.as_mut().process(input, kit_mut).unwrap();
     |                          ----^^^^^^
     |                          |
     |                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/frontend/irgen.rs:2529:38
     |
2529 |                     let (mut inst_u, mut val) = unaryexp.as_mut().process(input, kit_mut).unwrap();
     |                                      ----^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/frontend/irgen.rs:2666:29
     |
2666 |                         let mut args = funcparams.process(fparams_type_vec, kit_mut).unwrap(); //获得实参
     |                             ----^^^^
     |                             |
     |                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/frontend/irgen.rs:2681:29
     |
2681 |                         let mut args = funcparams.process(fparams_type_vec, kit_mut).unwrap();
     |                             ----^^^^
     |                             |
     |                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/frontend/irgen.rs:2696:29
     |
2696 |                         let mut args = funcparams.process(fparams_type_vec, kit_mut).unwrap();
     |                             ----^^^^
     |                             |
     |                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/frontend/irgen.rs:3158:22
     |
3158 |                 let (mut inst_left, val_left) = eqexp.process(tp_in, kit_mut).unwrap();
     |                      ----^^^^^^^^^
     |                      |
     |                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/frontend/irgen.rs:3159:22
     |
3159 |                 let (mut inst_right, val_right) = relexp.process(tp_in, kit_mut).unwrap();
     |                      ----^^^^^^^^^^
     |                      |
     |                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/frontend/irgen.rs:3361:22
     |
3361 |                 let (mut inst_left, val_left) = landexp
     |                      ----^^^^^^^^^
     |                      |
     |                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/frontend/irgen.rs:3365:22
     |
3365 |                 let (mut inst_right, val_right) = eqexp.process(input.0, kit_mut).unwrap();
     |                      ----^^^^^^^^^^
     |                      |
     |                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/frontend/irgen.rs:3470:21
     |
3470 |                 let mut val_or = ExpValue::None;
     |                     ----^^^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/frontend/irgen.rs:3526:10
     |
3526 |     let (mut var, mut symbol) = (
     |          ----^^^
     |          |
     |          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/frontend/irgen.rs:3526:19
     |
3526 |     let (mut var, mut symbol) = (
     |                   ----^^^^^^
     |                   |
     |                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/frontend/kit.rs:142:13
    |
142 |         let mut vec_funcs = self.get_functions().unwrap().clone();
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/frontend/kit.rs:641:21
    |
641 |                 let mut bbname = "notinblock";
    |                     ----^^^^^^
    |                     |
    |                     help: remove this `mut`

warning: associated function `slli` is never used
  --> src/backend/asm_builder.rs:81:12
   |
81 |     pub fn slli(&mut self, dest: &str, opr: &str, imm: i32) -> Result<()> {
   |            ^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: associated function `srai` is never used
  --> src/backend/asm_builder.rs:85:12
   |
85 |     pub fn srai(&mut self, dest: &str, opr: &str, imm: i32) -> Result<()> {
   |            ^^^^

warning: function `is_opt_mul` is never used
    --> src/backend/block.rs:2316:4
     |
2316 | fn is_opt_mul(imm: i32) -> bool {
     |    ^^^^^^^^^^

warning: function `is_opt_num` is never used
    --> src/backend/block.rs:2321:4
     |
2321 | fn is_opt_num(imm: i32) -> bool {
     |    ^^^^^^^^^^

warning: function `log2` is never used
    --> src/backend/block.rs:2326:4
     |
2326 | fn log2(imm: i32) -> i32 {
     |    ^^^^

warning: associated function `resolve_opt_mul` is never used
    --> src/backend/block.rs:2020:8
     |
2020 |     fn resolve_opt_mul(&mut self, dst: Operand, src: Operand, imm: i32, pool: &mut BackendPool) {
     |        ^^^^^^^^^^^^^^^

warning: associated function `resolve_opt_div` is never used
    --> src/backend/block.rs:2149:8
     |
2149 |     fn resolve_opt_div(&mut self, dst: Operand, src: Operand, imm: i32, pool: &mut BackendPool) {
     |        ^^^^^^^^^^^^^^^

warning: associated function `resolve_opt_rem` is never used
    --> src/backend/block.rs:2231:8
     |
2231 |     fn resolve_opt_rem(
     |        ^^^^^^^^^^^^^^^

warning: function `set_append` is never used
   --> src/backend/func.rs:703:4
    |
703 | fn set_append(blocks: &Vec<ObjPtr<BasicBlock>>) -> HashSet<ObjPtr<BasicBlock>> {
    |    ^^^^^^^^^^

warning: associated function `ilr_alloc_for_block` is never used
  --> src/backend/regalloc/local_ls_alloc.rs:14:8
   |
14 |     fn ilr_alloc_for_block(bb:ObjPtr<BB>){
   |        ^^^^^^^^^^^^^^^^^^^

warning: fields `passed_bbs` and `count_spill_cost` are never read
  --> src/backend/regalloc/opt_ls_alloc.rs:28:5
   |
26 | pub struct Allocator {
   |            --------- fields in this struct
27 |     
28 |     passed_bbs:HashSet<ObjPtr<BB>>,
   |     ^^^^^^^^^^
29 |     count_spill_cost:HashMap<i32,i32>,  //发生spill的代价
   |     ^^^^^^^^^^^^^^^^

warning: associated function `new` is never used
  --> src/backend/regalloc/opt_ls_alloc.rs:40:8
   |
40 |     fn new(id: i32, end: usize) -> RegInterval {
   |        ^^^

warning: associated function `alloc_block` is never used
  --> src/backend/regalloc/opt_ls_alloc.rs:75:8
   |
75 |     fn alloc_block(bb:ObjPtr<BB>){
   |        ^^^^^^^^^^^

warning: associated function `num_available_regs` is never used
  --> src/backend/regalloc/base_alloc.rs:52:12
   |
52 |     pub fn num_available_regs(&self,kind:ScalarType)->usize {
   |            ^^^^^^^^^^^^^^^^^^

warning: associated function `num_avialable_iregs` is never used
  --> src/backend/regalloc/base_alloc.rs:59:12
   |
59 |     pub fn num_avialable_iregs(&self)->usize{
   |            ^^^^^^^^^^^^^^^^^^^

warning: associated function `num_available_fregs` is never used
  --> src/backend/regalloc/base_alloc.rs:62:12
   |
62 |     pub fn num_available_fregs(&self)->usize{
   |            ^^^^^^^^^^^^^^^^^^^

warning: associated function `get_rest_iregs` is never used
  --> src/backend/regalloc/base_alloc.rs:98:12
   |
98 |     pub fn get_rest_iregs(&self)->Vec<i32>{
   |            ^^^^^^^^^^^^^^

warning: associated function `get_rest_fregs` is never used
   --> src/backend/regalloc/base_alloc.rs:109:12
    |
109 |     pub fn get_rest_fregs(&self)->Vec<i32>{
    |            ^^^^^^^^^^^^^^

warning: fields `spillings` and `dstr` are never read
   --> src/backend/regalloc/structs.rs:201:5
    |
200 | pub struct BlockAllocStat {
    |            -------------- fields in this struct
201 |     spillings: HashSet<i32>,
    |     ^^^^^^^^^
202 |     dstr: HashMap<i32, i32>,
    |     ^^^^

warning: field `init` is never read
  --> src/backend/structs.rs:20:5
   |
18 | pub struct IGlobalVar {
   |            ---------- field in this struct
19 |     name: String,
20 |     init: bool,
   |     ^^^^
   |
   = note: `IGlobalVar` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: field `init` is never read
  --> src/backend/structs.rs:26:5
   |
24 | pub struct FGlobalVar {
   |            ---------- field in this struct
25 |     name: String,
26 |     init: bool,
   |     ^^^^
   |
   = note: `FGlobalVar` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated function `swap` is never used
  --> src/container/prioritydeque.rs:23:8
   |
23 |     fn swap(&mut self,i:usize,j:usize) {
   |        ^^^^

warning: fields `fronts`, `nexts`, `available_ids`, `begin`, and `end` are never read
  --> src/container/Deque.rs:7:5
   |
6  | pub struct Deque<T> {
   |            ----- fields in this struct
7  |     fronts:HashMap<i32,i32>,
   |     ^^^^^^
8  |     nexts:HashMap<i32,i32>,
   |     ^^^^^
9  |     available_ids: VecDeque<i32>,
   |     ^^^^^^^^^^^^^
10 |     begin:i32,
   |     ^^^^^
11 |     end:i32,
   |     ^^^

warning: fields `id` and `list` are never read
  --> src/container/Deque.rs:17:5
   |
16 | pub struct CursorMut<'a,T> {
   |            --------- fields in this struct
17 |     id:i32,
   |     ^^
18 |     list:&'a Deque<T>,
   |     ^^^^

warning: associated function `bfs_find_end_bb` is never used
   --> src/frontend/kit.rs:430:8
    |
430 |     fn bfs_find_end_bb(head: ObjPtr<BasicBlock>) -> ObjPtr<BasicBlock> {
    |        ^^^^^^^^^^^^^^^

warning: function `calculate_dominator` is never used
  --> src/ir/analysis/dominator_tree.rs:35:8
   |
35 | pub fn calculate_dominator(head_bb: ObjPtr<BasicBlock>) -> DominatorTree {
   |        ^^^^^^^^^^^^^^^^^^^

warning: associated function `new` is never used
  --> src/ir/analysis/dominator_tree.rs:30:8
   |
30 |     fn new(dominatee: HashMap<ObjPtr<BasicBlock>, HashSet<ObjPtr<BasicBlock>>>) -> Self {
   |        ^^^

warning: function `dfs_inst_process` is never used
  --> src/ir/tools.rs:36:8
   |
36 | pub fn dfs_inst_process<F>(head: ObjPtr<BasicBlock>, mut predicate: F)
   |        ^^^^^^^^^^^^^^^^

warning: function `dfs_bb_process` is never used
  --> src/ir/tools.rs:75:8
   |
75 | pub fn dfs_bb_process<F>(head: ObjPtr<BasicBlock>, mut predicate: F)
   |        ^^^^^^^^^^^^^^

warning: function `bfs_find_end_bb` is never used
   --> src/ir/tools.rs:116:8
    |
116 | pub fn bfs_find_end_bb(head: ObjPtr<BasicBlock>) -> ObjPtr<BasicBlock> {
    |        ^^^^^^^^^^^^^^^

warning: method `isSerial` should have a snake case name
  --> src/algorithm/graphalgo.rs:52:12
   |
52 |     pub fn isSerial(&self, node: i32) -> bool {
   |            ^^^^^^^^ help: convert the identifier to snake case: `is_serial`
   |
   = note: `#[warn(non_snake_case)]` on by default

warning: method `mergeCycles` should have a snake case name
  --> src/algorithm/graphalgo.rs:64:12
   |
64 |     pub fn mergeCycles(&mut self) {
   |            ^^^^^^^^^^^ help: convert the identifier to snake case: `merge_cycles`

warning: method `countMaxNodeValuePath` should have a snake case name
  --> src/algorithm/graphalgo.rs:74:12
   |
74 |     pub fn countMaxNodeValuePath(&mut self, from: i32, tos: HashSet<i32>) -> T {
   |            ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `count_max_node_value_path`

warning: method `dfs_findMaxNodeValuePath` should have a snake case name
  --> src/algorithm/graphalgo.rs:90:12
   |
90 |     pub fn dfs_findMaxNodeValuePath(&mut self, from: i32, tos: HashSet<i32>) -> T {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `dfs_find_max_node_value_path`

warning: method `bfs_estimateMaxNodeValuePath` should have a snake case name
   --> src/algorithm/graphalgo.rs:140:12
    |
140 |     pub fn bfs_estimateMaxNodeValuePath(&mut self, from: i32, tos: HashSet<i32>) -> T {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `bfs_estimate_max_node_value_path`

warning: unused `std::result::Result` that must be used
  --> src/backend/mod.rs:66:5
   |
66 |     writeln!(file, "    .file    \"{}\"", in_path);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
   = note: `#[warn(unused_must_use)]` on by default
   = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
  --> src/backend/mod.rs:67:5
   |
67 |     writeln!(file, "    .option pic");
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
   = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
  --> src/backend/mod.rs:68:5
   |
68 |     writeln!(file, "    .text");
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
   = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
  --> src/backend/mod.rs:76:5
   |
76 |     writeln!(file, "    .section    .note.GNU-stack,\"\",@progbits");
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
   = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/asm_builder.rs:200:9
    |
200 |         writeln!(self.f, "    .text");
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/asm_builder.rs:201:9
    |
201 |         writeln!(self.f, "    .align    1");
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/asm_builder.rs:202:9
    |
202 |         writeln!(self.f, "    .globl    {label}");
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/asm_builder.rs:203:9
    |
203 |         writeln!(self.f, "    .type {label}, @function");
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/func.rs:588:17
    |
588 |                 builder.addi("sp", "sp", -stack_size);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/func.rs:589:17
    |
589 | /                 builder.s(
590 | |                     &ra.to_string(false),
591 | |                     "sp",
592 | |                     stack_size - ADDR_SIZE,
593 | |                     false,
594 | |                     true,
595 | |                 );
    | |_________________^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/func.rs:599:25
    |
599 |                         builder.s(&reg.to_string(false), "sp", of, false, true);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/func.rs:603:17
    |
603 |                 builder.op1("li", "gp", &stack_size.to_string());
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/func.rs:604:17
    |
604 |                 builder.op2("sub", "sp", "sp", "gp", false, true);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/func.rs:605:17
    |
605 |                 builder.op2("add", "gp", "gp", "sp", false, true);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/func.rs:606:17
    |
606 |                 builder.s(&ra.to_string(false), "gp", -ADDR_SIZE, false, true);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/func.rs:610:25
    |
610 |                         builder.s(&reg.to_string(false), "gp", -(slot.get_pos()), false, true);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/func.rs:623:25
    |
623 |                         builder.l(&reg.to_string(false), "sp", of, false, true);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/func.rs:626:17
    |
626 | /                 builder.l(
627 | |                     &ra.to_string(false),
628 | |                     "sp",
629 | |                     stack_size - ADDR_SIZE,
630 | |                     false,
631 | |                     true,
632 | |                 );
    | |_________________^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/func.rs:633:17
    |
633 |                 builder.addi("sp", "sp", stack_size);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/func.rs:635:17
    |
635 |                 builder.op1("li", "gp", &stack_size.to_string());
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/func.rs:636:17
    |
636 |                 builder.op2("add", "sp", "sp", "gp", false, true);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/func.rs:637:17
    |
637 |                 builder.l(&ra.to_string(false), "sp", -ADDR_SIZE, false, true);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/func.rs:641:25
    |
641 |                         builder.l(&reg.to_string(false), "sp", -(slot.get_pos()), false, true);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/module.rs:143:13
    |
143 |             writeln!(f, "    .data");
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/module.rs:151:21
    |
151 |                     writeln!(f, "   .globl {name}\n    .align  2\n     .type   {name}, @object\n   .size   {name}, 4");
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/module.rs:152:21
    |
152 |                     writeln!(f, "{name}:\n    .word   {value}\n");
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/module.rs:157:21
    |
157 |                     writeln!(f, "{name}:\n    .word   {value}\n");
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/module.rs:160:21
    |
160 | ...   writeln!(f, "   .globl {name}\n    .align  3\n     .type   {name}, @object\n   .size   {name}, {num}", name = array.name, num = array.size * ...
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/module.rs:161:21
    |
161 |                     writeln!(f, "{name}:", name = array.name);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/module.rs:164:29
    |
164 | ...                   writeln!(f, "    .word   {value}");
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/module.rs:167:25
    |
167 |                         writeln!(f, "    .zero   {num}", num = array.size * 4);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/module.rs:171:21
    |
171 | ...   writeln!(f, "   .globl {name}\n    .align  3\n     .type   {name}, @object\n   .size   {name}, {num}", name = array.name, num = array.size * ...
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/module.rs:172:21
    |
172 |                     writeln!(f, "{name}:", name = array.name);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/module.rs:175:29
    |
175 | ...                   writeln!(f, "    .word   {value}");
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/module.rs:178:25
    |
178 |                         writeln!(f, "    .zero   {num}", num = array.size * 4);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/backend/module.rs:188:17
    |
188 |                 func.as_mut().generate(pool.put_context(Context::new()), f);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/module.rs:196:17
    |
196 | /                 func.as_mut()
197 | |                     .generate_row(pool.put_context(Context::new()), f);
    | |______________________________________________________________________^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: constant `IMM_12_Bs` should have an upper case name
 --> src/backend/operand.rs:9:11
  |
9 | pub const IMM_12_Bs: i32 = 2047;
  |           ^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `IMM_12_BS`
  |
  = note: `#[warn(non_upper_case_globals)]` on by default

warning: constant `IMM_20_Bs` should have an upper case name
  --> src/backend/operand.rs:10:11
   |
10 | pub const IMM_20_Bs: i32 = 524287;
   |           ^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `IMM_20_BS`

warning: variable `stackSize` should have a snake case name
  --> src/backend/regalloc/easy_ls_alloc.rs:22:14
   |
22 |         let (stackSize,bb_stack_sizes)=regalloc::regalloc::countStackSize(func, &spillings);
   |              ^^^^^^^^^ help: convert the identifier to snake case: `stack_size`

warning: function `countStackSize` should have a snake case name
  --> src/backend/regalloc/regalloc.rs:18:8
   |
18 | pub fn countStackSize(
   |        ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `count_stack_size`

warning: variable `stackSize` should have a snake case name
  --> src/backend/regalloc/regalloc.rs:23:13
   |
23 |     let mut stackSize: usize = 0;
   |             ^^^^^^^^^ help: convert the identifier to snake case: `stack_size`

warning: unused `std::result::Result` that must be used
   --> src/backend/structs.rs:282:9
    |
282 |         builder.print_array(&self.value, self.name.clone(), self.size);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/backend/structs.rs:327:9
    |
327 |         builder.print_farray(&self.value, self.name.clone(), self.size);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: module `Deque` should have a snake case name
 --> src/container/mod.rs:3:9
  |
3 | pub mod Deque;
  |         ^^^^^ help: convert the identifier to snake case: `deque`

warning: method `andOther` should have a snake case name
 --> src/container/bitmap.rs:9:12
  |
9 |     pub fn andOther(&mut self,other:&Bitmap) {
  |            ^^^^^^^^ help: convert the identifier to snake case: `and_other`

warning: method `orOther` should have a snake case name
  --> src/container/bitmap.rs:18:12
   |
18 |     pub fn orOther(&mut self,other :&Bitmap) {
   |            ^^^^^^^ help: convert the identifier to snake case: `or_other`

warning: unused `std::result::Result` that must be used
  --> src/frontend/irgen.rs:33:5
   |
33 |     compunit.process(1, &mut kit_mut);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
  --> src/frontend/irgen.rs:50:13
   |
50 |             item.process(1, kit_mut);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
    --> src/frontend/irgen.rs:1269:17
     |
1269 |                 blk.process((None, None), kit_mut);
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
    --> src/frontend/irgen.rs:1319:17
     |
1319 |                 blk.process((None, None), kit_mut);
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
    --> src/frontend/irgen.rs:1467:17
     |
1467 |                 item.process(input, kit_mut);
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
    --> src/frontend/irgen.rs:1484:21
     |
1484 |                     decl.process(1, kit_mut);
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
    --> src/frontend/irgen.rs:1488:21
     |
1488 |                     stmt.process(input, kit_mut);
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
    --> src/frontend/irgen.rs:1504:21
     |
1504 |                     assign.process(input, kit_mut);
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
    --> src/frontend/irgen.rs:1508:21
     |
1508 |                     exp_stmt.process((Type::Int, input.0, input.1), kit_mut); //这里可能有问题
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
    --> src/frontend/irgen.rs:1512:21
     |
1512 |                     blk.process(input, kit_mut);
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
    --> src/frontend/irgen.rs:1516:21
     |
1516 |                     if_stmt.process(input, kit_mut);
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
    --> src/frontend/irgen.rs:1520:21
     |
1520 |                     while_stmt.process(input, kit_mut);
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
    --> src/frontend/irgen.rs:1524:21
     |
1524 |                     break_stmt.process(input, kit_mut);
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
    --> src/frontend/irgen.rs:1529:21
     |
1529 |                     continue_stmt.process(input, kit_mut);
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
    --> src/frontend/irgen.rs:1534:21
     |
1534 |                     ret_stmt.process(input, kit_mut);
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
    --> src/frontend/irgen.rs:1645:13
     |
1645 |             exp.process(input.0, kit_mut);
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled

warning: `compiler` (lib) generated 340 warnings
warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6031:5
     |
6031 |     {GlobalItems::Decl(d)}
     |     ^                    ^
     |
     = note: `#[warn(unused_braces)]` on by default
help: remove these braces
     |
6031 -     {GlobalItems::Decl(d)}
6031 +     GlobalItems::Decl(d)
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6042:5
     |
6042 |     {GlobalItems::FuncDef(fd)}
     |     ^                        ^
     |
help: remove these braces
     |
6042 -     {GlobalItems::FuncDef(fd)}
6042 +     GlobalItems::FuncDef(fd)
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6053:5
     |
6053 |     {Decl::ConstDecl(__0)}
     |     ^                    ^
     |
help: remove these braces
     |
6053 -     {Decl::ConstDecl(__0)}
6053 +     Decl::ConstDecl(__0)
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6064:5
     |
6064 |     {Decl::VarDecl(__0)}
     |     ^                  ^
     |
help: remove these braces
     |
6064 -     {Decl::VarDecl(__0)}
6064 +     Decl::VarDecl(__0)
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6078:5
     |
6078 |     {ConstDecl{btype:BType::Int,const_def_vec:cdv}}
     |     ^                                             ^
     |
help: remove these braces
     |
6078 -     {ConstDecl{btype:BType::Int,const_def_vec:cdv}}
6078 +     ConstDecl{btype:BType::Int,const_def_vec:cdv}
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6092:5
     |
6092 |     {ConstDecl{btype:BType::Float,const_def_vec:cdv}}
     |     ^                                               ^
     |
help: remove these braces
     |
6092 -     {ConstDecl{btype:BType::Float,const_def_vec:cdv}}
6092 +     ConstDecl{btype:BType::Float,const_def_vec:cdv}
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6126:5
     |
6126 |     {ConstDef{ident:ident, const_exp_vec:const_exp_vec, const_init_val:const_init_val}}
     |     ^                                                                                 ^
     |
help: remove these braces
     |
6126 -     {ConstDef{ident:ident, const_exp_vec:const_exp_vec, const_init_val:const_init_val}}
6126 +     ConstDef{ident:ident, const_exp_vec:const_exp_vec, const_init_val:const_init_val}
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6137:5
     |
6137 |     {ConstInitVal::ConstExp(__0)}
     |     ^                           ^
     |
help: remove these braces
     |
6137 -     {ConstInitVal::ConstExp(__0)}
6137 +     ConstInitVal::ConstExp(__0)
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6172:5
     |
6172 |     {VarDecl{btype:BType::Int,var_def_vec:v}}
     |     ^                                       ^
     |
help: remove these braces
     |
6172 -     {VarDecl{btype:BType::Int,var_def_vec:v}}
6172 +     VarDecl{btype:BType::Int,var_def_vec:v}
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6185:5
     |
6185 |     {VarDecl{btype:BType::Float,var_def_vec:v}}
     |     ^                                         ^
     |
help: remove these braces
     |
6185 -     {VarDecl{btype:BType::Float,var_def_vec:v}}
6185 +     VarDecl{btype:BType::Float,var_def_vec:v}
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6230:5
     |
6230 |     {VarDef::Array((i,expvec))}
     |     ^                         ^
     |
help: remove these braces
     |
6230 -     {VarDef::Array((i,expvec))}
6230 +     VarDef::Array((i,expvec))
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6243:5
     |
6243 |     {VarDef::NonArrayInit((i,initval))}
     |     ^                                 ^
     |
help: remove these braces
     |
6243 -     {VarDef::NonArrayInit((i,initval))}
6243 +     VarDef::NonArrayInit((i,initval))
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6257:5
     |
6257 |     {VarDef::ArrayInit((i,expvec,initval))}
     |     ^                                     ^
     |
help: remove these braces
     |
6257 -     {VarDef::ArrayInit((i,expvec,initval))}
6257 +     VarDef::ArrayInit((i,expvec,initval))
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6268:5
     |
6268 |     {InitVal::Exp(__0)}
     |     ^                 ^
     |
help: remove these braces
     |
6268 -     {InitVal::Exp(__0)}
6268 +     InitVal::Exp(__0)
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6297:5
     |
6297 |     {InitVal::InitValVec(Vec::new())}
     |     ^                               ^
     |
help: remove these braces
     |
6297 -     {InitVal::InitValVec(Vec::new())}
6297 +     InitVal::InitValVec(Vec::new())
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6505:5
     |
6505 |     {BlockItem::Decl(__0)}
     |     ^                    ^
     |
help: remove these braces
     |
6505 -     {BlockItem::Decl(__0)}
6505 +     BlockItem::Decl(__0)
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6516:5
     |
6516 |     {BlockItem::Stmt(__0)}
     |     ^                    ^
     |
help: remove these braces
     |
6516 -     {BlockItem::Stmt(__0)}
6516 +     BlockItem::Stmt(__0)
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6712:5
     |
6712 |     {Exp{add_exp:Box::new(__0)}}
     |     ^                          ^
     |
help: remove these braces
     |
6712 -     {Exp{add_exp:Box::new(__0)}}
6712 +     Exp{add_exp:Box::new(__0)}
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6723:5
     |
6723 |     {Cond{l_or_exp:l_or_exp}}
     |     ^                       ^
     |
help: remove these braces
     |
6723 -     {Cond{l_or_exp:l_or_exp}}
6723 +     Cond{l_or_exp:l_or_exp}
     |

warning: unnecessary braces around block return value
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6735:5
     |
6735 |     {LVal{id:id, exp_vec:exp_vec}}
     |     ^                            ^
     |
help: remove these braces
     |
6735 -     {LVal{id:id, exp_vec:exp_vec}}
6735 +     LVal{id:id, exp_vec:exp_vec}
     |

warning: unused variable: `s_option`
  --> src/main.rs:37:9
   |
37 |     let s_option = matches.is_present("S");
   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_s_option`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `o1_option`
  --> src/main.rs:42:9
   |
42 |     let o1_option = matches.is_present("O1");
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_o1_option`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6017:9
     |
6017 |     (_, mut global_items, _): (usize, alloc::vec::Vec<GlobalItems>, usize),
     |         ----^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`
     |
     = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6121:9
     |
6121 |     (_, mut const_exp_vec, _): (usize, alloc::vec::Vec<ConstExp>, usize),
     |         ----^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6168:9
     |
6168 |     (_, mut v, _): (usize, Vec<VarDef>, usize),
     |         ----^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6181:9
     |
6181 |     (_, mut v, _): (usize, Vec<VarDef>, usize),
     |         ----^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6227:9
     |
6227 |     (_, mut expvec, _): (usize, alloc::vec::Vec<ConstExp>, usize),
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6252:9
     |
6252 |     (_, mut expvec, _): (usize, alloc::vec::Vec<ConstExp>, usize),
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6306:9
     |
6306 |     (_, mut funcname, _): (usize, Ident, usize),
     |         ----^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6308:9
     |
6308 |     (_, mut funcfpv, _): (usize, FuncFParams, usize),
     |         ----^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6324:9
     |
6324 |     (_, mut funcname, _): (usize, Ident, usize),
     |         ----^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6326:9
     |
6326 |     (_, mut funcfpv, _): (usize, FuncFParams, usize),
     |         ----^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6342:9
     |
6342 |     (_, mut funcname, _): (usize, Ident, usize),
     |         ----^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6344:9
     |
6344 |     (_, mut funcfpv, _): (usize, FuncFParams, usize),
     |         ----^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6360:9
     |
6360 |     (_, mut funcname, _): (usize, Ident, usize),
     |         ----^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6377:9
     |
6377 |     (_, mut funcname, _): (usize, Ident, usize),
     |         ----^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6394:9
     |
6394 |     (_, mut funcname, _): (usize, Ident, usize),
     |         ----^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6457:9
     |
6457 |     (_, mut expvec, _): (usize, alloc::vec::Vec<Exp>, usize),
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6474:9
     |
6474 |     (_, mut expvec, _): (usize, alloc::vec::Vec<Exp>, usize),
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6488:9
     |
6488 |     (_, mut block_vec, _): (usize, alloc::vec::Vec<BlockItem>, usize),
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:6732:9
     |
6732 |     (_, mut exp_vec, _): (usize, alloc::vec::Vec<Exp>, usize),
     |         ----^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:7211:9
     |
7211 |     (_, mut s, _): (usize, &'input str, usize),
     |         ----^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:7263:9
     |
7263 |     (_, mut s, _): (usize, &'input str, usize),
     |         ----^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:7276:9
     |
7276 |     (_, mut s, _): (usize, &'input str, usize),
     |         ----^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:7290:9
     |
7290 |     (_, mut s, _): (usize, &'input str, usize),
     |         ----^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:7329:9
     |
7329 |     (_, mut s, _): (usize, &'input str, usize),
     |         ----^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:7342:9
     |
7342 |     (_, mut s, _): (usize, &'input str, usize),
     |         ----^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:7355:9
     |
7355 |     (_, mut s, _): (usize, &'input str, usize),
     |         ----^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/yjh/work/sysy/compiler2023/target/debug/build/compiler-eed1e1805ce7205c/out/SysYRust.rs:7420:9
     |
7420 |     (_, mut head, _): (usize, &'input str, usize),
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: module `SysYRust` should have a snake case name
  --> src/main.rs:11:3
   |
11 |   SysYRust
   |   ^^^^^^^^ help: convert the identifier to snake case: `sys_yrust`
   |
   = note: `#[warn(non_snake_case)]` on by default

warning: `compiler` (bin "compiler") generated 50 warnings
    Finished dev [unoptimized + debuginfo] target(s) in 2.27s
     Running `target/debug/compiler a.sy -S -o a.s`
249.37user 14.04system 4:23.28elapsed 100%CPU (0avgtext+0avgdata 254408maxresident)k
0inputs+218344outputs (0major+130653minor)pagefaults 0swaps
