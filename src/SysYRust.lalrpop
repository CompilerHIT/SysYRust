use sysylib::frontend::ast::*;



grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
    _
  }

pub CompUnit:CompUnit  = <mut global_items:GlobalItems*> =>CompUnit{<>};



GlobalItems:GlobalItems = {
    <d:Decl> =>{GlobalItems::Decl(<>)},
    <fd:FuncDef> =>{GlobalItems::FuncDef(<>)},

}

Decl:Decl = {
    ConstDecl=>{Decl::ConstDecl(<>)},
    VarDecl =>{Decl::VarDecl(<>)},
}

ConstDecl:ConstDecl = {
    "const" "int"  <cdv:ConstDefVec> ";"=>{ConstDecl{btype:BType::Int,const_def_vec:cdv}},
    "const" "float"  <cdv:ConstDefVec> ";"=>{ConstDecl{btype:BType::Float,const_def_vec:cdv}},
}

ConstDefVec:Vec<ConstDef> = {
    <mut constvec:(<ConstDef> ",")*>  <c:ConstDef?> =>{
        match c{
            None =>constvec,
            Some(c) =>{
                constvec.push(c);
                constvec
            }
        }
    },
}



ConstDef:ConstDef = {
    <ident:Ident> <mut const_exp_vec:("[" <ConstExp> "]")*> "=" <const_init_val:ConstInitVal> =>{ConstDef{<>}},
}

ConstInitVal:ConstInitVal = {
    ConstExp =>{ConstInitVal::ConstExp(<>)},
    "{" <mut v:(<ConstInitVal> ",")*> <val:ConstInitVal?> "}"=>{
        match val{
            None =>ConstInitVal::ConstInitValVec(v),
            Some(val) =>{
                v.push(val);
                ConstInitVal::ConstInitValVec(v)
            }
        }
    },
}

VarDecl:VarDecl = {
    // <t:BType> <mut v:VarDefVec> ";"=>{VarDecl{<>}},
    "int" <mut v:VarDefVec> ";"=>{VarDecl{btype:BType::Int,var_def_vec:v}},
    "float" <mut v:VarDefVec> ";"=>{VarDecl{btype:BType::Float,var_def_vec:v}},
}

VarDefVec:Vec<VarDef> = {
    <mut v:(<VarDef> ",")*> <e:VarDef?> =>{
        match e{
            None => v,
            Some(e) =>{
                v.push(e);
                v
            }
        }
    },
}


VarDef:VarDef = {
    <i:Ident>  =>{
        VarDef::NonArray(<>)
    },
    
    <i:Ident> <mut expvec:("[" <ConstExp> "]")+> =>{VarDef::Array((i,expvec))},


    <i:Ident> "=" <initval:InitVal> =>{VarDef::NonArrayInit((i,initval))},

    <i:Ident> <mut expvec:("[" <ConstExp> "]")+> "=" <initval:InitVal> =>{VarDef::ArrayInit((i,expvec,initval))},
}


InitVal:InitVal = {
    Exp =>{InitVal::Exp(<>)},
    "{" <i:InitVal> <mut initvec1:("," <InitVal>)*> "}" =>{
        initvec1.insert(0,i);
        InitVal::InitValVec(initvec1)
    },
    "{" "}" =>{InitVal::InitValVec(Vec::new())},
}


FuncDef:FuncDef = {
    "int" <mut funcname:Ident> "(" <mut funcfpv:FuncFParams> ")" <b:Block> =>{
        FuncDef::ParameterFuncDef((FuncType::Int, funcname, funcfpv,b))
    },
    "void" <mut funcname:Ident> "(" <mut funcfpv:FuncFParams> ")" <b:Block> =>{
        FuncDef::ParameterFuncDef((FuncType::Void, funcname, funcfpv,b))
    },
    "float" <mut funcname:Ident> "(" <mut funcfpv:FuncFParams> ")" <b:Block> =>{
        FuncDef::ParameterFuncDef((FuncType::Float, funcname, funcfpv,b))
    },

    "int" <mut funcname:Ident> "(" ")" <b:Block> =>{
        FuncDef::NonParameterFuncDef((FuncType::Int, funcname,b))
    },
    "void" <mut funcname:Ident> "(" ")" <b:Block> =>{
        FuncDef::NonParameterFuncDef((FuncType::Void, funcname,b))
    },
    "float" <mut funcname:Ident> "(" ")" <b:Block> =>{
        FuncDef::NonParameterFuncDef((FuncType::Float, funcname,b))
    },
}


FuncFParams:FuncFParams= {
    <funcp1:FuncFParam> <mut func_fparams_vec:("," <FuncFParam>)*> =>{
        func_fparams_vec.insert(0,funcp1);
        FuncFParams{func_fparams_vec}
    },
}

FuncFParam:FuncFParam = {
    "int" <name:Ident>  =>{
        FuncFParam::NonArray((BType::Int,name))
    },
    "float" <name:Ident>  =>{
        FuncFParam::NonArray((BType::Float,name))
    },

    "int" <name:Ident> "[" "]" <mut expvec:("[" <Exp> "]")*> =>{
        FuncFParam::Array((BType::Int,name,expvec))
    },
    "float" <name:Ident> "[" "]" <mut expvec:("[" <Exp> "]")*> =>{
        FuncFParam::Array((BType::Float,name,expvec))
    },
}

Block:Block = {
    "{" <mut block_vec:BlockItem*> "}"=>{
Block{<>}
    },
}

BlockItem:BlockItem = {
    Decl =>{BlockItem::Decl(<>)},
    Stmt =>{BlockItem::Stmt(<>)},
}


// Stmt: Stmt = {
//     MatchedStmt => {Stmt::MatchedStmt(<>)},
//     OpenStmt => {Stmt::OpenStmt(<>)},
// }

// MatchedStmt: MatchedStmt = {
//   <lval: LVal> "=" <exp: Exp> ";" => {
//     MatchedStmt::AssignStmt((lval, exp))
//   },
//   <exp: (Exp)?> ";" => {
//     MatchedStmt::NonActionStmt(ExpStmt{<>})
//   },
//   Block =>{
//     MatchedStmt::BlockStmt(<>)
//   },
//   "if" "(" <cond: Cond> ")" <then: MatchedStmt> 
//   "else" <else_then: MatchedStmt> => {
//     MatchedStmt::IfElseStmt((cond,then,else_then))
//   },
//   "while" "(" <cond: Cond> ")" <body: MatchedStmt> => {
//     MatchedStmt::WhileStmt((cond,body))
//   },
//   "break" ";" => {
//     MatchedStmt::BreakStmt
//   },
//   "continue" ";" => {
//     MatchedStmt::ContinueStmt
//   },
//   "return" <exp: (Exp)?> ";" => {
//     MatchedStmt::RetStmt(ExpStmt{<>})
//   },
// }

// OpenStmt: OpenStmt = {
//   "if" "(" <cond: Cond> ")" <then: Stmt> => {
//     OpenStmt::IfStmt((cond,then))
//   },
//   "if" "(" <cond: Cond> ")" <then: MatchedStmt> 
//   "else" <else_then: OpenStmt> => {
//     OpenStmt::IfElseStmt((cond,then,else_then))
//   },
//   "while" "(" <cond: Cond> ")" <body: OpenStmt> => {
//     OpenStmt::WhileStmt((cond,body))
//   },
// }


Stmt: Stmt = {
    MatchedStmt => <>,
    OpenStmt => <>,
  }
  
  MatchedStmt: Stmt = {
    <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(Assign { <> }),
    <exp: (Exp)?> ";" => Stmt::ExpStmt(ExpStmt { <> }),
    Block => Stmt::Block(<>),
    "if" "(" <cond: Cond> ")" <then: MatchedStmt>
    "else" <else_then: MatchedStmt> => {
      Stmt::If(Box::new(If { cond, then, else_then: Some(else_then) }))
    },
    "while" "(" <cond: Cond> ")" <body: MatchedStmt> => {
      Stmt::While(Box::new(While { <> }))
    },
    "break" ";" => Stmt::Break(Break),
    "continue" ";" => Stmt::Continue(Continue),
    "return" <exp: (Exp)?> ";" => Stmt::Return(Return { <> }),
  }
  
  OpenStmt: Stmt = {
    "if" "(" <cond: Cond> ")" <then: Stmt> => {
      Stmt::If(Box::new(If { cond, then, else_then: None }))
    },
    "if" "(" <cond: Cond> ")" <then: MatchedStmt>
    "else" <else_then: OpenStmt> => {
      Stmt::If(Box::new(If { cond, then, else_then: Some(else_then) }))
    },
    "while" "(" <cond: Cond> ")" <body: OpenStmt> => {
      Stmt::While(Box::new(While { <> }))
    },
  }

Exp:Exp = {
    AddExp =>{Exp{add_exp:Box::new(<>)}},
}

Cond:Cond = {
    <l_or_exp:LOrExp> =>{Cond{<>}},
}

LVal:LVal = {
    <id:Ident> <mut exp_vec:("[" <Exp> "]")*> =>{LVal{<>}},
}

PrimaryExp:PrimaryExp = {
    "(" <Exp> ")" =>{
        PrimaryExp::Exp(Box::new(<>))
    },
    LVal =>{
        PrimaryExp::LVal(<>)
    },
    Number =>{
        PrimaryExp::Number(<>)
    },
}

Number:Number = {
    <int_const:IntConst> =>{
        Number{<>}
    },
    //floatConst =>{

    //},todo:floatConst
}

UnaryExp:UnaryExp = {
    PrimaryExp =>{
        UnaryExp::PrimaryExp(Box::new(<>))
    },
    <id:Ident> "(" <func_fparams:FuncFParams?> ")" =>{
        UnaryExp::FuncCall((id,OptionFuncFParams{func_fparams}))
    },
    // "+" <UnaryExp> =>{
    //     UnaryExp::AddUnaryExp(Box::new(<>))
    // },
    <op:UnaryOp> <exp:UnaryExp> =>{
        UnaryExp::OpUnary((op,Box::new(exp)))
    },
}

UnaryOp:UnaryOp = {
    "+" =>{
        UnaryOp::Add
    },
    "-" =>{
        UnaryOp::Minus
    },
    "!" =>{
        UnaryOp::Exclamation
    },
}

FuncRParams:FuncRParams = {
    <e:Exp> <mut exp_vec:("," <Exp>)*> =>{
        exp_vec.insert(0,e);
        FuncRParams{exp_vec}
    },
}


MulExp:MulExp = {
    UnaryExp =>{
        MulExp::UnaryExp(Box::new(<>))
    },
    <m:MulExp> "*" <u:UnaryExp> =>{
        MulExp::MulExp((Box::new(m),u))
    },
    <m:MulExp> "/" <u:UnaryExp> =>{
        MulExp::DivExp((Box::new(m),u))
    },
    <m:MulExp> "%" <u:UnaryExp> =>{
        MulExp::ModExp((Box::new(m),u))
    },
}

AddOp:AddOp  = {
    "+" =>{
        AddOp::Add
    },
    "-" =>{
        AddOp::Minus
    },
}

AddExp:AddExp = {
    MulExp =>{
        AddExp::MulExp(Box::new(<>))
    },
    //AddExp "+" MulExp =>{}
    <a:AddExp> <op:AddOp> <m:MulExp> =>{
        AddExp::OpExp((Box::new(a),op,m))
    },
    //AddExp "-" MulExp =>{
//0
    //},
}

RelOp:RelOp = {
    "<" =>{
        RelOp::Less
    },
    "<=" =>{
        RelOp::LessOrEqual
    },
    ">" =>{
        RelOp::Greater
    },
    ">=" =>{
        RelOp::GreaterOrEqual
    },

}

RelExp:RelExp = {
    AddExp =>{
        RelExp::AddExp(<>)
    },
    <r:RelExp> <op:RelOp> <a:AddExp> =>{
        RelExp::OpExp((Box::new(r),op,a))
    },
}

EqExp:EqExp = {
    RelExp =>{
        EqExp::RelExp(<>)
    },
    <e:EqExp> "==" <r:RelExp> =>{
        EqExp::EqualExp((Box::new(e), r))
    },
    <e:EqExp> "!=" <r:RelExp> =>{
        EqExp::NotEqualExp((Box::new(e), r))
    },
}

LAndExp:LAndExp = {
    EqExp =>{
        LAndExp::EqExp(<>)
    },
    <l:LAndExp> "&&" <e:EqExp> =>{
        LAndExp::AndExp((Box::new(l), e))
    },
}

LOrExp:LOrExp = {
    LAndExp =>{
        LOrExp::LAndExp(<>)
    },
    <o:LOrExp> "||" <a:LAndExp> =>{
        LOrExp::OrExp((Box::new(o),a))
    },
}

ConstExp:ConstExp = {
    <add_exp:AddExp> =>{
        ConstExp{<>}
    },
}


//下面是标识符
//todo:


Ident:Ident = {

    <mut s:r"[_a-zA-Z][_a-zA-Z0-9]*"> =>{
        s.to_string()//todo:返回字符串值
    },
}

IntConst:IntConst = {
    <i:DecimalConst> =>{
       i 
    },
    <i:OctalConst> =>{
i
    },
    <i:HexadecimalConst> =>{
i
    },
}

DecimalConst:IntConst = {
    <mut s:r"[1-9][0-9]*"> =>{
        i32::from_str_radix(<>, 10).unwrap()
    },
}

OctalConst:IntConst = {

    <mut s:r"0[0-7]*"> =>{
        //s//todo:返回字符串值
        i32::from_str_radix(<>, 8).unwrap()
    },
}

HexadecimalConst:IntConst = {
    <mut s:r"0[xX][0-9a-fA-F]+"> =>{
        i32::from_str_radix(&<>[2..], 16).unwrap()//s//todo:返回字符串值
    },
}


//todo:浮点数还没加



