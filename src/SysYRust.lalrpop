use sysylib::frontend::ast::*;
use hexf_parse::parse_hexf32;



grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
    _
  }

pub CompUnit:CompUnit  = <global_items:GlobalItems*> =>CompUnit{<>};



GlobalItems:GlobalItems = {
    <d:Decl> =>GlobalItems::Decl(<>),
    <fd:FuncDef> =>GlobalItems::FuncDef(<>),

}

Decl:Decl = {
    ConstDecl=>Decl::ConstDecl(<>),
    VarDecl =>Decl::VarDecl(<>),
}

ConstDecl:ConstDecl = {
    "const" "int"  <cdv:ConstDefVec> ";"=>ConstDecl{btype:BType::Int,const_def_vec:cdv},
    "const" "float"  <cdv:ConstDefVec> ";"=>ConstDecl{btype:BType::Float,const_def_vec:cdv},
}

ConstDefVec:Vec<ConstDef> = {
    <mut constvec:(<ConstDef> ",")*>  <c:ConstDef?> =>
        match c{
            None =>constvec,
            Some(c) =>{
                constvec.push(c);
                constvec
            }
        }
    ,
}



ConstDef:ConstDef = {
    <ident:Ident> <const_exp_vec:("[" <ConstExp> "]")*> "=" <const_init_val:ConstInitVal> =>ConstDef{<>},
}

ConstInitVal:ConstInitVal = {
    ConstExp =>ConstInitVal::ConstExp(<>),
    "{" <mut v:(<ConstInitVal> ",")*> <val:ConstInitVal?> "}"=>
        match val{
            None =>ConstInitVal::ConstInitValVec(v),
            Some(val) =>{
                v.push(val);
                ConstInitVal::ConstInitValVec(v)
            }
        }
    ,
}

VarDecl:VarDecl = {
    "int" <v:VarDefVec> ";"=>VarDecl{btype:BType::Int,var_def_vec:v},
    "float" <v:VarDefVec> ";"=>VarDecl{btype:BType::Float,var_def_vec:v},
}

VarDefVec:Vec<VarDef> = {
    <mut v:(<VarDef> ",")*> <e:VarDef?> =>
        match e{
            None => v,
            Some(e) =>{
                v.push(e);
                v
            }
        }
    ,
}


VarDef:VarDef = {
    <i:Ident>  =>
        VarDef::NonArray(<>)
    ,
    
    <i:Ident> <expvec:("[" <ConstExp> "]")+> =>VarDef::Array((i,expvec)),


    <i:Ident> "=" <initval:InitVal> =>VarDef::NonArrayInit((i,initval)),

    <i:Ident> <expvec:("[" <ConstExp> "]")+> "=" <initval:InitVal> =>VarDef::ArrayInit((i,expvec,initval)),
}


InitVal:InitVal = {
    Exp =>InitVal::Exp(<>),
    "{" <i:InitVal> <mut initvec1:("," <InitVal>)*> "}" =>{
        initvec1.insert(0,i);
        InitVal::InitValVec(initvec1)
    },
    "{" "}" =>InitVal::InitValVec(Vec::new()),
}


FuncDef:FuncDef = {
    "int" <funcname:Ident> "(" <funcfpv:FuncFParams> ")" <b:Block> =>
        FuncDef::ParameterFuncDef((FuncType::Int, funcname, funcfpv,b))
    ,
    "void" <funcname:Ident> "(" <funcfpv:FuncFParams> ")" <b:Block> =>
        FuncDef::ParameterFuncDef((FuncType::Void, funcname, funcfpv,b))
    ,
    "float" <funcname:Ident> "(" <funcfpv:FuncFParams> ")" <b:Block> =>
        FuncDef::ParameterFuncDef((FuncType::Float, funcname, funcfpv,b))
    ,

    "int" <funcname:Ident> "(" ")" <b:Block> =>
        FuncDef::NonParameterFuncDef((FuncType::Int, funcname,b))
    ,
    "void" <funcname:Ident> "(" ")" <b:Block> =>
        FuncDef::NonParameterFuncDef((FuncType::Void, funcname,b))
    ,
    "float" <funcname:Ident> "(" ")" <b:Block> =>
        FuncDef::NonParameterFuncDef((FuncType::Float, funcname,b))
    ,
}


FuncFParams:FuncFParams= {
    <funcp1:FuncFParam> <mut func_fparams_vec:("," <FuncFParam>)*> =>{
        func_fparams_vec.insert(0,funcp1);
        FuncFParams{func_fparams_vec}
    },
}

FuncFParam:FuncFParam = {
    "int" <name:Ident>  =>
        FuncFParam::NonArray((BType::Int,name))
    ,
    "float" <name:Ident>  =>
        FuncFParam::NonArray((BType::Float,name))
    ,

    "int" <name:Ident> "[" "]" <expvec:("[" <Exp> "]")*> =>
        FuncFParam::Array((BType::Int,name,expvec))
    ,
    "float" <name:Ident> "[" "]" <expvec:("[" <Exp> "]")*> =>
        FuncFParam::Array((BType::Float,name,expvec))
    ,
}

Block:Block = {
    "{" <block_vec:BlockItem*> "}"=>
Block{<>}
    ,
}

BlockItem:BlockItem = {
    Decl =>BlockItem::Decl(<>),
    Stmt =>BlockItem::Stmt(<>),
}




Stmt: Stmt = {
    MatchedStmt => <>,
    OpenStmt => <>,
  }
  
  MatchedStmt: Stmt = {
    <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(Assign { <> }),
    <exp: (Exp)?> ";" => Stmt::ExpStmt(ExpStmt { <> }),
    Block => Stmt::Block(<>),
    "if" "(" <cond: Cond> ")" <then: MatchedStmt>
    "else" <else_then: MatchedStmt> => 
      Stmt::If(Box::new(If { cond, then, else_then: Some(else_then) }))
    ,
    "while" "(" <cond: Cond> ")" <body: MatchedStmt> => 
      Stmt::While(Box::new(While { <> }))
    ,
    "break" ";" => Stmt::Break(Break),
    "continue" ";" => Stmt::Continue(Continue),
    "return" <exp: (Exp)?> ";" => Stmt::Return(Return { <> }),
  }
  
  OpenStmt: Stmt = {
    "if" "(" <cond: Cond> ")" <then: Stmt> => 
      Stmt::If(Box::new(If { cond, then, else_then: None }))
    ,
    "if" "(" <cond: Cond> ")" <then: MatchedStmt>
    "else" <else_then: OpenStmt> => 
      Stmt::If(Box::new(If { cond, then, else_then: Some(else_then) }))
    ,
    "while" "(" <cond: Cond> ")" <body: OpenStmt> => 
      Stmt::While(Box::new(While { <> }))
    ,
  }

Exp:Exp = {
    AddExp =>Exp{add_exp:Box::new(<>)},
}

Cond:Cond = {
    <l_or_exp:LOrExp> =>Cond{<>},
}

LVal:LVal = {
    <id:Ident> <exp_vec:("[" <Exp> "]")*> =>LVal{<>},
}

PrimaryExp:PrimaryExp = {
    "(" <Exp> ")" =>
        PrimaryExp::Exp(Box::new(<>))
    ,
    LVal =>
        PrimaryExp::LVal(<>)
    ,
    Number =>
        PrimaryExp::Number(<>)
    ,
}

Number:Number = {
    <int_const:IntConst> =>
        Number::IntConst(int_const)
    ,
    <float_const:FloatConst> =>
        Number::FloatConst(float_const)
    ,//todo:floatConst
}

UnaryExp:UnaryExp = {
    PrimaryExp =>
        UnaryExp::PrimaryExp(Box::new(<>))
    ,
    <id:Ident> "(" <func_fparams:FuncRParams?> ")" =>
        UnaryExp::FuncCall((id,OptionFuncRParams{func_fparams}))
    ,
    <op:UnaryOp> <exp:UnaryExp> =>
        UnaryExp::OpUnary((op,Box::new(exp)))
    ,
}

UnaryOp:UnaryOp = {
    "+" =>
        UnaryOp::Add
    ,
    "-" =>
        UnaryOp::Minus
    ,
    "!" =>
        UnaryOp::Exclamation
    ,
}

FuncRParams:FuncRParams = {
    <e:Exp> <mut exp_vec:("," <Exp>)*> =>{
        exp_vec.insert(0,e);
        FuncRParams{exp_vec}
    },
}


MulExp:MulExp = {
    UnaryExp =>
        MulExp::UnaryExp(Box::new(<>))
    ,
    <m:MulExp> "*" <u:UnaryExp> =>
        MulExp::MulExp((Box::new(m),u))
    ,
    <m:MulExp> "/" <u:UnaryExp> =>
        MulExp::DivExp((Box::new(m),u))
    ,
    <m:MulExp> "%" <u:UnaryExp> =>
        MulExp::ModExp((Box::new(m),u))
    ,
}

AddOp:AddOp  = {
    "+" =>
        AddOp::Add
    ,
    "-" =>
        AddOp::Minus
    ,
}

AddExp:AddExp = {
    MulExp =>
        AddExp::MulExp(Box::new(<>))
    ,
    <a:AddExp> <op:AddOp> <m:MulExp> =>
        AddExp::OpExp((Box::new(a),op,m))
    ,

}

RelOp:RelOp = {
    "<" =>
        RelOp::Less
    ,
    "<=" =>
        RelOp::LessOrEqual
    ,
    ">" =>
        RelOp::Greater
    ,
    ">=" =>
        RelOp::GreaterOrEqual
    ,

}

RelExp:RelExp = {
    AddExp =>
        RelExp::AddExp(<>)
    ,
    <r:RelExp> <op:RelOp> <a:AddExp> =>
        RelExp::OpExp((Box::new(r),op,a))
    ,
}

EqExp:EqExp = {
    RelExp =>
        EqExp::RelExp(<>)
    ,
    <e:EqExp> "==" <r:RelExp> =>
        EqExp::EqualExp((Box::new(e), r))
    ,
    <e:EqExp> "!=" <r:RelExp> =>
        EqExp::NotEqualExp((Box::new(e), r))
    ,
}

LAndExp:LAndExp = {
    EqExp =>
        LAndExp::EqExp(<>)
    ,
    <l:LAndExp> "&&" <e:EqExp> =>
        LAndExp::AndExp((Box::new(l), e))
    ,
}

LOrExp:LOrExp = {
    LAndExp =>
        LOrExp::LAndExp(<>)
    ,
    <o:LOrExp> "||" <a:LAndExp> =>
        LOrExp::OrExp((Box::new(o),a))
    ,
}

ConstExp:ConstExp = {
    <add_exp:AddExp> =>
        ConstExp{<>}
    ,
}


//下面是标识符
//todo:


Ident:Ident = {

    <s:r"[_a-zA-Z][_a-zA-Z0-9]*"> =>
        s.to_string()//todo:返回字符串值
    ,
}

IntConst:IntConst = {
    <i:DecimalConst> =>
       i ,
    <i:OctalConst> =>
i
    ,
    <i:HexadecimalConst> =>
i
    ,
}

DecimalConst:IntConst = {
    <s:r"[1-9][0-9]*"> =>
        i32::from_str_radix(<>, 10).unwrap()
    ,
}

OctalConst:IntConst = {

    <s:r"0[0-7]*"> =>
        //s//todo:返回字符串值
        i32::from_str_radix(<>, 8).unwrap()
    ,
}

HexadecimalConst:IntConst = {
    <s:r"0[xX][0-9a-fA-F]+"> =>
        i32::from_str_radix(&<>[2..], 16).unwrap()//s//todo:返回字符串值
    ,
}


FloatConst:FloatConst = {
    <f:DecimalFloat> =>
        f
    ,
    <f:HexadecimalFloat> =>
        f
    ,
}

DecimalFloat:FloatConst = {
    <s:r"[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?"> =>
        s.parse::<f32>().unwrap()
    ,
    <s:r"[0-9]+\.([eE][+-]?[0-9]+)?"> =>
        s.parse::<f32>().unwrap()
    ,
    <s:r"[0-9]+[eE][+-]?[0-9]+"> =>
        s.parse::<f32>().unwrap()
    ,
}


HexadecimalFloat:FloatConst = {
    <head:r"0[xX][0-9a-fA-F]+[pP][-+]?[0-9]+">=>
        parse_hexf32(head, false).unwrap()
    ,

    <head:r"0[xX][0-9a-fA-F]+\.[0-9a-fA-F]+[pP][-+]?[0-9]+"> =>
        parse_hexf32(head, false).unwrap()
    ,

    <head:r"0[xX]\.[0-9a-fA-F]+[pP][-+]?[0-9]+"> =>
        parse_hexf32(head, false).unwrap()
    ,

    <head:r"0[xX][0-9a-fA-F]+\.[pP][-+]?[0-9]+"> =>
        parse_hexf32(head, false).unwrap()
    ,
}
//todo:浮点数还没加


